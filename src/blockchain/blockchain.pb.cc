// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain.proto

#include "blockchain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr AppendRequest::AppendRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_entries_()
  , leader_commit_(uint64_t{0u}){}
struct AppendRequestDefaultTypeInternal {
  constexpr AppendRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendRequestDefaultTypeInternal() {}
  union {
    AppendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendRequestDefaultTypeInternal _AppendRequest_default_instance_;
constexpr AppendResponse::AppendResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppendResponseDefaultTypeInternal {
  constexpr AppendResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendResponseDefaultTypeInternal() {}
  union {
    AppendResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendResponseDefaultTypeInternal _AppendResponse_default_instance_;
constexpr PrepopulateResponse::PrepopulateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_keys_(uint64_t{0u}){}
struct PrepopulateResponseDefaultTypeInternal {
  constexpr PrepopulateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrepopulateResponseDefaultTypeInternal() {}
  union {
    PrepopulateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrepopulateResponseDefaultTypeInternal _PrepopulateResponse_default_instance_;
constexpr ReadItem::ReadItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_seq_num_(uint64_t{0u})
  , trans_seq_num_(uint64_t{0u}){}
struct ReadItemDefaultTypeInternal {
  constexpr ReadItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadItemDefaultTypeInternal() {}
  union {
    ReadItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadItemDefaultTypeInternal _ReadItem_default_instance_;
constexpr WriteItem::WriteItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : write_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , write_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WriteItemDefaultTypeInternal {
  constexpr WriteItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteItemDefaultTypeInternal() {}
  union {
    WriteItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteItemDefaultTypeInternal _WriteItem_default_instance_;
constexpr Endorsement::Endorsement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_set_()
  , write_set_()
  , transaction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , endorser_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , received_ts_(nullptr)
  , execution_start_ts_(nullptr)
  , execution_end_ts_(nullptr)
  , endorser_id_(uint64_t{0u})
  , aborted_(false){}
struct EndorsementDefaultTypeInternal {
  constexpr EndorsementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndorsementDefaultTypeInternal() {}
  union {
    Endorsement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndorsementDefaultTypeInternal _Endorsement_default_instance_;
constexpr TransactionProposal::TransactionProposal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , values_()
  , received_ts_(nullptr)
  , execution_delay_(uint64_t{0u})
  , id_(uint64_t{0u})
  , type_(0)
{}
struct TransactionProposalDefaultTypeInternal {
  constexpr TransactionProposalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionProposalDefaultTypeInternal() {}
  union {
    TransactionProposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionProposalDefaultTypeInternal _TransactionProposal_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : endorsement_(nullptr)
  , proposal_(nullptr){}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr Block::Block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , prev_block_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(uint64_t{0u}){}
struct BlockDefaultTypeInternal {
  constexpr BlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockDefaultTypeInternal _Block_default_instance_;
constexpr Action::Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocksize_(uint64_t{0u})
  , early_execution_(false)
  , reorder_(false){}
struct ActionDefaultTypeInternal {
  constexpr ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionDefaultTypeInternal _Action_default_instance_;
constexpr Reward::Reward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : throughput_(0)
  , is_leader_(false){}
struct RewardDefaultTypeInternal {
  constexpr RewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RewardDefaultTypeInternal() {}
  union {
    Reward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RewardDefaultTypeInternal _Reward_default_instance_;
constexpr Experience::Experience(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(nullptr)
  , reward_(nullptr)
  , write_ratio_(0)
  , hot_key_ratio_(0)
  , trans_arrival_rate_(0)
  , execution_delay_(0){}
struct ExperienceDefaultTypeInternal {
  constexpr ExperienceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExperienceDefaultTypeInternal() {}
  union {
    Experience _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExperienceDefaultTypeInternal _Experience_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_blockchain_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_blockchain_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_blockchain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_blockchain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AppendRequest, leader_commit_),
  PROTOBUF_FIELD_OFFSET(::AppendRequest, log_entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PrepopulateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PrepopulateResponse, num_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReadItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReadItem, read_key_),
  PROTOBUF_FIELD_OFFSET(::ReadItem, block_seq_num_),
  PROTOBUF_FIELD_OFFSET(::ReadItem, trans_seq_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WriteItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WriteItem, write_key_),
  PROTOBUF_FIELD_OFFSET(::WriteItem, write_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Endorsement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Endorsement, read_set_),
  PROTOBUF_FIELD_OFFSET(::Endorsement, write_set_),
  PROTOBUF_FIELD_OFFSET(::Endorsement, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::Endorsement, endorser_id_),
  PROTOBUF_FIELD_OFFSET(::Endorsement, endorser_signature_),
  PROTOBUF_FIELD_OFFSET(::Endorsement, aborted_),
  PROTOBUF_FIELD_OFFSET(::Endorsement, received_ts_),
  PROTOBUF_FIELD_OFFSET(::Endorsement, execution_start_ts_),
  PROTOBUF_FIELD_OFFSET(::Endorsement, execution_end_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransactionProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransactionProposal, type_),
  PROTOBUF_FIELD_OFFSET(::TransactionProposal, keys_),
  PROTOBUF_FIELD_OFFSET(::TransactionProposal, values_),
  PROTOBUF_FIELD_OFFSET(::TransactionProposal, execution_delay_),
  PROTOBUF_FIELD_OFFSET(::TransactionProposal, received_ts_),
  PROTOBUF_FIELD_OFFSET(::TransactionProposal, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Request, endorsement_),
  PROTOBUF_FIELD_OFFSET(::Request, proposal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Block, transactions_),
  PROTOBUF_FIELD_OFFSET(::Block, block_id_),
  PROTOBUF_FIELD_OFFSET(::Block, prev_block_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Action, blocksize_),
  PROTOBUF_FIELD_OFFSET(::Action, early_execution_),
  PROTOBUF_FIELD_OFFSET(::Action, reorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Reward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Reward, throughput_),
  PROTOBUF_FIELD_OFFSET(::Reward, is_leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Experience, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Experience, write_ratio_),
  PROTOBUF_FIELD_OFFSET(::Experience, hot_key_ratio_),
  PROTOBUF_FIELD_OFFSET(::Experience, trans_arrival_rate_),
  PROTOBUF_FIELD_OFFSET(::Experience, execution_delay_),
  PROTOBUF_FIELD_OFFSET(::Experience, action_),
  PROTOBUF_FIELD_OFFSET(::Experience, reward_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AppendRequest)},
  { 8, -1, -1, sizeof(::AppendResponse)},
  { 14, -1, -1, sizeof(::PrepopulateResponse)},
  { 21, -1, -1, sizeof(::ReadItem)},
  { 30, -1, -1, sizeof(::WriteItem)},
  { 38, -1, -1, sizeof(::Endorsement)},
  { 53, -1, -1, sizeof(::TransactionProposal)},
  { 65, -1, -1, sizeof(::Request)},
  { 73, -1, -1, sizeof(::Block)},
  { 82, -1, -1, sizeof(::Action)},
  { 91, -1, -1, sizeof(::Reward)},
  { 99, -1, -1, sizeof(::Experience)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PrepopulateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReadItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WriteItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Endorsement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransactionProposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Reward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Experience_default_instance_),
};

const char descriptor_table_protodef_blockchain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020blockchain.proto\032\033google/protobuf/empt"
  "y.proto\032\037google/protobuf/timestamp.proto"
  "\";\n\rAppendRequest\022\025\n\rleader_commit\030\001 \001(\004"
  "\022\023\n\013log_entries\030\002 \003(\014\"\020\n\016AppendResponse\""
  "\'\n\023PrepopulateResponse\022\020\n\010num_keys\030\001 \001(\004"
  "\"J\n\010ReadItem\022\020\n\010read_key\030\001 \001(\014\022\025\n\rblock_"
  "seq_num\030\002 \001(\004\022\025\n\rtrans_seq_num\030\003 \001(\004\"3\n\t"
  "WriteItem\022\021\n\twrite_key\030\001 \001(\014\022\023\n\013write_va"
  "lue\030\002 \001(\014\"\302\002\n\013Endorsement\022\033\n\010read_set\030\001 "
  "\003(\0132\t.ReadItem\022\035\n\twrite_set\030\002 \003(\0132\n.Writ"
  "eItem\022\026\n\016transaction_id\030\003 \001(\014\022\023\n\013endorse"
  "r_id\030\004 \001(\004\022\032\n\022endorser_signature\030\005 \001(\014\022\017"
  "\n\007aborted\030\006 \001(\010\022/\n\013received_ts\030\007 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\0226\n\022execution_st"
  "art_ts\030\010 \001(\0132\032.google.protobuf.Timestamp"
  "\0224\n\020execution_end_ts\030\t \001(\0132\032.google.prot"
  "obuf.Timestamp\"\262\002\n\023TransactionProposal\022\'"
  "\n\004type\030\001 \001(\0162\031.TransactionProposal.Type\022"
  "\014\n\004keys\030\002 \003(\t\022\016\n\006values\030\003 \003(\014\022\027\n\017executi"
  "on_delay\030\004 \001(\004\022/\n\013received_ts\030\005 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022\n\n\002id\030\006 \001(\004\"~\n\004T"
  "ype\022\007\n\003Get\020\000\022\007\n\003Put\020\001\022\023\n\017TransactSavings"
  "\020\002\022\023\n\017DepositChecking\020\003\022\017\n\013SendPayment\020\004"
  "\022\016\n\nWriteCheck\020\005\022\016\n\nAmalgamate\020\006\022\t\n\005Quer"
  "y\020\007\"T\n\007Request\022!\n\013endorsement\030\001 \001(\0132\014.En"
  "dorsement\022&\n\010proposal\030\002 \001(\0132\024.Transactio"
  "nProposal\"V\n\005Block\022\"\n\014transactions\030\001 \003(\013"
  "2\014.Endorsement\022\020\n\010block_id\030\002 \001(\004\022\027\n\017prev"
  "_block_hash\030\003 \001(\t\"E\n\006Action\022\021\n\tblocksize"
  "\030\001 \001(\004\022\027\n\017early_execution\030\002 \001(\010\022\017\n\007reord"
  "er\030\003 \001(\010\"/\n\006Reward\022\022\n\nthroughput\030\001 \001(\001\022\021"
  "\n\tis_leader\030\002 \001(\010\"\237\001\n\nExperience\022\023\n\013writ"
  "e_ratio\030\001 \001(\001\022\025\n\rhot_key_ratio\030\002 \001(\001\022\032\n\022"
  "trans_arrival_rate\030\003 \001(\001\022\027\n\017execution_de"
  "lay\030\004 \001(\001\022\027\n\006action\030\005 \001(\0132\007.Action\022\027\n\006re"
  "ward\030\006 \001(\0132\007.Reward2\263\003\n\010PeerComm\0223\n\016appe"
  "nd_entries\022\016.AppendRequest\032\017.AppendRespo"
  "nse\"\000\0222\n\014send_to_peer\022\010.Request\032\026.google"
  ".protobuf.Empty\"\000\022;\n\023send_to_peer_stream"
  "\022\010.Request\032\026.google.protobuf.Empty\"\000(\001\022;"
  "\n\013prepopulate\022\024.TransactionProposal\032\024.Pr"
  "epopulateResponse\"\000\022F\n\022start_benchmarkin"
  "g\022\026.google.protobuf.Empty\032\026.google.proto"
  "buf.Empty\"\000\022D\n\020end_benchmarking\022\026.google"
  ".protobuf.Empty\032\026.google.protobuf.Empty\""
  "\000\0226\n\021start_new_episode\022\007.Action\032\026.google"
  ".protobuf.Empty\"\0002E\n\tAgentComm\0228\n\023end_cu"
  "rrent_episode\022\007.Reward\032\026.google.protobuf"
  ".Empty\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_blockchain_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_blockchain_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2eproto = {
  false, false, 1936, descriptor_table_protodef_blockchain_2eproto, "blockchain.proto", 
  &descriptor_table_blockchain_2eproto_once, descriptor_table_blockchain_2eproto_deps, 2, 12,
  schemas, file_default_instances, TableStruct_blockchain_2eproto::offsets,
  file_level_metadata_blockchain_2eproto, file_level_enum_descriptors_blockchain_2eproto, file_level_service_descriptors_blockchain_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_blockchain_2eproto_getter() {
  return &descriptor_table_blockchain_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_blockchain_2eproto(&descriptor_table_blockchain_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionProposal_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_blockchain_2eproto);
  return file_level_enum_descriptors_blockchain_2eproto[0];
}
bool TransactionProposal_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransactionProposal_Type TransactionProposal::Get;
constexpr TransactionProposal_Type TransactionProposal::Put;
constexpr TransactionProposal_Type TransactionProposal::TransactSavings;
constexpr TransactionProposal_Type TransactionProposal::DepositChecking;
constexpr TransactionProposal_Type TransactionProposal::SendPayment;
constexpr TransactionProposal_Type TransactionProposal::WriteCheck;
constexpr TransactionProposal_Type TransactionProposal::Amalgamate;
constexpr TransactionProposal_Type TransactionProposal::Query;
constexpr TransactionProposal_Type TransactionProposal::Type_MIN;
constexpr TransactionProposal_Type TransactionProposal::Type_MAX;
constexpr int TransactionProposal::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class AppendRequest::_Internal {
 public:
};

AppendRequest::AppendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  log_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppendRequest)
}
AppendRequest::AppendRequest(const AppendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      log_entries_(from.log_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_commit_ = from.leader_commit_;
  // @@protoc_insertion_point(copy_constructor:AppendRequest)
}

void AppendRequest::SharedCtor() {
leader_commit_ = uint64_t{0u};
}

AppendRequest::~AppendRequest() {
  // @@protoc_insertion_point(destructor:AppendRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendRequest::ArenaDtor(void* object) {
  AppendRequest* _this = reinterpret_cast< AppendRequest* >(object);
  (void)_this;
}
void AppendRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AppendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_entries_.Clear();
  leader_commit_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 leader_commit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leader_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes log_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_log_entries();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 leader_commit = 1;
  if (this->_internal_leader_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_leader_commit(), target);
  }

  // repeated bytes log_entries = 2;
  for (int i = 0, n = this->_internal_log_entries_size(); i < n; i++) {
    const auto& s = this->_internal_log_entries(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendRequest)
  return target;
}

size_t AppendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes log_entries = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(log_entries_.size());
  for (int i = 0, n = log_entries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      log_entries_.Get(i));
  }

  // uint64 leader_commit = 1;
  if (this->_internal_leader_commit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_leader_commit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendRequest::GetClassData() const { return &_class_data_; }

void AppendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppendRequest *>(to)->MergeFrom(
      static_cast<const AppendRequest &>(from));
}


void AppendRequest::MergeFrom(const AppendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_entries_.MergeFrom(from.log_entries_);
  if (from._internal_leader_commit() != 0) {
    _internal_set_leader_commit(from._internal_leader_commit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendRequest::CopyFrom(const AppendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRequest::IsInitialized() const {
  return true;
}

void AppendRequest::InternalSwap(AppendRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  log_entries_.InternalSwap(&other->log_entries_);
  swap(leader_commit_, other->leader_commit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[0]);
}

// ===================================================================

class AppendResponse::_Internal {
 public:
};

AppendResponse::AppendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:AppendResponse)
}
AppendResponse::AppendResponse(const AppendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AppendResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AppendResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[1]);
}

// ===================================================================

class PrepopulateResponse::_Internal {
 public:
};

PrepopulateResponse::PrepopulateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PrepopulateResponse)
}
PrepopulateResponse::PrepopulateResponse(const PrepopulateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_keys_ = from.num_keys_;
  // @@protoc_insertion_point(copy_constructor:PrepopulateResponse)
}

void PrepopulateResponse::SharedCtor() {
num_keys_ = uint64_t{0u};
}

PrepopulateResponse::~PrepopulateResponse() {
  // @@protoc_insertion_point(destructor:PrepopulateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrepopulateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrepopulateResponse::ArenaDtor(void* object) {
  PrepopulateResponse* _this = reinterpret_cast< PrepopulateResponse* >(object);
  (void)_this;
}
void PrepopulateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepopulateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrepopulateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PrepopulateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_keys_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepopulateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 num_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepopulateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrepopulateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 num_keys = 1;
  if (this->_internal_num_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_num_keys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrepopulateResponse)
  return target;
}

size_t PrepopulateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrepopulateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 num_keys = 1;
  if (this->_internal_num_keys() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_num_keys());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrepopulateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrepopulateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrepopulateResponse::GetClassData() const { return &_class_data_; }

void PrepopulateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrepopulateResponse *>(to)->MergeFrom(
      static_cast<const PrepopulateResponse &>(from));
}


void PrepopulateResponse::MergeFrom(const PrepopulateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrepopulateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_keys() != 0) {
    _internal_set_num_keys(from._internal_num_keys());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrepopulateResponse::CopyFrom(const PrepopulateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrepopulateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepopulateResponse::IsInitialized() const {
  return true;
}

void PrepopulateResponse::InternalSwap(PrepopulateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(num_keys_, other->num_keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepopulateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[2]);
}

// ===================================================================

class ReadItem::_Internal {
 public:
};

ReadItem::ReadItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ReadItem)
}
ReadItem::ReadItem(const ReadItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  read_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_read_key().empty()) {
    read_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_read_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&block_seq_num_, &from.block_seq_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&trans_seq_num_) -
    reinterpret_cast<char*>(&block_seq_num_)) + sizeof(trans_seq_num_));
  // @@protoc_insertion_point(copy_constructor:ReadItem)
}

void ReadItem::SharedCtor() {
read_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_seq_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trans_seq_num_) -
    reinterpret_cast<char*>(&block_seq_num_)) + sizeof(trans_seq_num_));
}

ReadItem::~ReadItem() {
  // @@protoc_insertion_point(destructor:ReadItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  read_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadItem::ArenaDtor(void* object) {
  ReadItem* _this = reinterpret_cast< ReadItem* >(object);
  (void)_this;
}
void ReadItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_key_.ClearToEmpty();
  ::memset(&block_seq_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_seq_num_) -
      reinterpret_cast<char*>(&block_seq_num_)) + sizeof(trans_seq_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes read_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_read_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_seq_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 trans_seq_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trans_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes read_key = 1;
  if (!this->_internal_read_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_read_key(), target);
  }

  // uint64 block_seq_num = 2;
  if (this->_internal_block_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_seq_num(), target);
  }

  // uint64 trans_seq_num = 3;
  if (this->_internal_trans_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_trans_seq_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadItem)
  return target;
}

size_t ReadItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes read_key = 1;
  if (!this->_internal_read_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_read_key());
  }

  // uint64 block_seq_num = 2;
  if (this->_internal_block_seq_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block_seq_num());
  }

  // uint64 trans_seq_num = 3;
  if (this->_internal_trans_seq_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_trans_seq_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadItem::GetClassData() const { return &_class_data_; }

void ReadItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadItem *>(to)->MergeFrom(
      static_cast<const ReadItem &>(from));
}


void ReadItem::MergeFrom(const ReadItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_read_key().empty()) {
    _internal_set_read_key(from._internal_read_key());
  }
  if (from._internal_block_seq_num() != 0) {
    _internal_set_block_seq_num(from._internal_block_seq_num());
  }
  if (from._internal_trans_seq_num() != 0) {
    _internal_set_trans_seq_num(from._internal_trans_seq_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadItem::CopyFrom(const ReadItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadItem::IsInitialized() const {
  return true;
}

void ReadItem::InternalSwap(ReadItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &read_key_, lhs_arena,
      &other->read_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadItem, trans_seq_num_)
      + sizeof(ReadItem::trans_seq_num_)
      - PROTOBUF_FIELD_OFFSET(ReadItem, block_seq_num_)>(
          reinterpret_cast<char*>(&block_seq_num_),
          reinterpret_cast<char*>(&other->block_seq_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[3]);
}

// ===================================================================

class WriteItem::_Internal {
 public:
};

WriteItem::WriteItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WriteItem)
}
WriteItem::WriteItem(const WriteItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  write_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_key().empty()) {
    write_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_write_key(), 
      GetArenaForAllocation());
  }
  write_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_write_value().empty()) {
    write_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_write_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:WriteItem)
}

void WriteItem::SharedCtor() {
write_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
write_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WriteItem::~WriteItem() {
  // @@protoc_insertion_point(destructor:WriteItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  write_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteItem::ArenaDtor(void* object) {
  WriteItem* _this = reinterpret_cast< WriteItem* >(object);
  (void)_this;
}
void WriteItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteItem::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_key_.ClearToEmpty();
  write_value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes write_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_write_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes write_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_write_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes write_key = 1;
  if (!this->_internal_write_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_write_key(), target);
  }

  // bytes write_value = 2;
  if (!this->_internal_write_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_write_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteItem)
  return target;
}

size_t WriteItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes write_key = 1;
  if (!this->_internal_write_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_write_key());
  }

  // bytes write_value = 2;
  if (!this->_internal_write_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_write_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteItem::GetClassData() const { return &_class_data_; }

void WriteItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteItem *>(to)->MergeFrom(
      static_cast<const WriteItem &>(from));
}


void WriteItem::MergeFrom(const WriteItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_write_key().empty()) {
    _internal_set_write_key(from._internal_write_key());
  }
  if (!from._internal_write_value().empty()) {
    _internal_set_write_value(from._internal_write_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteItem::CopyFrom(const WriteItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteItem::IsInitialized() const {
  return true;
}

void WriteItem::InternalSwap(WriteItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &write_key_, lhs_arena,
      &other->write_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &write_value_, lhs_arena,
      &other->write_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[4]);
}

// ===================================================================

class Endorsement::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& received_ts(const Endorsement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& execution_start_ts(const Endorsement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& execution_end_ts(const Endorsement* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Endorsement::_Internal::received_ts(const Endorsement* msg) {
  return *msg->received_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Endorsement::_Internal::execution_start_ts(const Endorsement* msg) {
  return *msg->execution_start_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Endorsement::_Internal::execution_end_ts(const Endorsement* msg) {
  return *msg->execution_end_ts_;
}
void Endorsement::clear_received_ts() {
  if (GetArenaForAllocation() == nullptr && received_ts_ != nullptr) {
    delete received_ts_;
  }
  received_ts_ = nullptr;
}
void Endorsement::clear_execution_start_ts() {
  if (GetArenaForAllocation() == nullptr && execution_start_ts_ != nullptr) {
    delete execution_start_ts_;
  }
  execution_start_ts_ = nullptr;
}
void Endorsement::clear_execution_end_ts() {
  if (GetArenaForAllocation() == nullptr && execution_end_ts_ != nullptr) {
    delete execution_end_ts_;
  }
  execution_end_ts_ = nullptr;
}
Endorsement::Endorsement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  read_set_(arena),
  write_set_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Endorsement)
}
Endorsement::Endorsement(const Endorsement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      read_set_(from.read_set_),
      write_set_(from.write_set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  endorser_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endorser_signature().empty()) {
    endorser_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_endorser_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_received_ts()) {
    received_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.received_ts_);
  } else {
    received_ts_ = nullptr;
  }
  if (from._internal_has_execution_start_ts()) {
    execution_start_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.execution_start_ts_);
  } else {
    execution_start_ts_ = nullptr;
  }
  if (from._internal_has_execution_end_ts()) {
    execution_end_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.execution_end_ts_);
  } else {
    execution_end_ts_ = nullptr;
  }
  ::memcpy(&endorser_id_, &from.endorser_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&aborted_) -
    reinterpret_cast<char*>(&endorser_id_)) + sizeof(aborted_));
  // @@protoc_insertion_point(copy_constructor:Endorsement)
}

void Endorsement::SharedCtor() {
transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
endorser_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&received_ts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aborted_) -
    reinterpret_cast<char*>(&received_ts_)) + sizeof(aborted_));
}

Endorsement::~Endorsement() {
  // @@protoc_insertion_point(destructor:Endorsement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Endorsement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endorser_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete received_ts_;
  if (this != internal_default_instance()) delete execution_start_ts_;
  if (this != internal_default_instance()) delete execution_end_ts_;
}

void Endorsement::ArenaDtor(void* object) {
  Endorsement* _this = reinterpret_cast< Endorsement* >(object);
  (void)_this;
}
void Endorsement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Endorsement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Endorsement::Clear() {
// @@protoc_insertion_point(message_clear_start:Endorsement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_set_.Clear();
  write_set_.Clear();
  transaction_id_.ClearToEmpty();
  endorser_signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && received_ts_ != nullptr) {
    delete received_ts_;
  }
  received_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && execution_start_ts_ != nullptr) {
    delete execution_start_ts_;
  }
  execution_start_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && execution_end_ts_ != nullptr) {
    delete execution_end_ts_;
  }
  execution_end_ts_ = nullptr;
  ::memset(&endorser_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aborted_) -
      reinterpret_cast<char*>(&endorser_id_)) + sizeof(aborted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Endorsement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ReadItem read_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_read_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .WriteItem write_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_write_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes transaction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 endorser_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          endorser_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes endorser_signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_endorser_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool aborted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          aborted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp received_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_received_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp execution_start_ts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_start_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp execution_end_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution_end_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Endorsement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Endorsement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ReadItem read_set = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_read_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_read_set(i), target, stream);
  }

  // repeated .WriteItem write_set = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_write_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_write_set(i), target, stream);
  }

  // bytes transaction_id = 3;
  if (!this->_internal_transaction_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transaction_id(), target);
  }

  // uint64 endorser_id = 4;
  if (this->_internal_endorser_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_endorser_id(), target);
  }

  // bytes endorser_signature = 5;
  if (!this->_internal_endorser_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_endorser_signature(), target);
  }

  // bool aborted = 6;
  if (this->_internal_aborted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_aborted(), target);
  }

  // .google.protobuf.Timestamp received_ts = 7;
  if (this->_internal_has_received_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::received_ts(this), target, stream);
  }

  // .google.protobuf.Timestamp execution_start_ts = 8;
  if (this->_internal_has_execution_start_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::execution_start_ts(this), target, stream);
  }

  // .google.protobuf.Timestamp execution_end_ts = 9;
  if (this->_internal_has_execution_end_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::execution_end_ts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Endorsement)
  return target;
}

size_t Endorsement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Endorsement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ReadItem read_set = 1;
  total_size += 1UL * this->_internal_read_set_size();
  for (const auto& msg : this->read_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .WriteItem write_set = 2;
  total_size += 1UL * this->_internal_write_set_size();
  for (const auto& msg : this->write_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes transaction_id = 3;
  if (!this->_internal_transaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_id());
  }

  // bytes endorser_signature = 5;
  if (!this->_internal_endorser_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_endorser_signature());
  }

  // .google.protobuf.Timestamp received_ts = 7;
  if (this->_internal_has_received_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *received_ts_);
  }

  // .google.protobuf.Timestamp execution_start_ts = 8;
  if (this->_internal_has_execution_start_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *execution_start_ts_);
  }

  // .google.protobuf.Timestamp execution_end_ts = 9;
  if (this->_internal_has_execution_end_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *execution_end_ts_);
  }

  // uint64 endorser_id = 4;
  if (this->_internal_endorser_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_endorser_id());
  }

  // bool aborted = 6;
  if (this->_internal_aborted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Endorsement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Endorsement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Endorsement::GetClassData() const { return &_class_data_; }

void Endorsement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Endorsement *>(to)->MergeFrom(
      static_cast<const Endorsement &>(from));
}


void Endorsement::MergeFrom(const Endorsement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Endorsement)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_set_.MergeFrom(from.read_set_);
  write_set_.MergeFrom(from.write_set_);
  if (!from._internal_transaction_id().empty()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (!from._internal_endorser_signature().empty()) {
    _internal_set_endorser_signature(from._internal_endorser_signature());
  }
  if (from._internal_has_received_ts()) {
    _internal_mutable_received_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_received_ts());
  }
  if (from._internal_has_execution_start_ts()) {
    _internal_mutable_execution_start_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_execution_start_ts());
  }
  if (from._internal_has_execution_end_ts()) {
    _internal_mutable_execution_end_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_execution_end_ts());
  }
  if (from._internal_endorser_id() != 0) {
    _internal_set_endorser_id(from._internal_endorser_id());
  }
  if (from._internal_aborted() != 0) {
    _internal_set_aborted(from._internal_aborted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Endorsement::CopyFrom(const Endorsement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Endorsement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endorsement::IsInitialized() const {
  return true;
}

void Endorsement::InternalSwap(Endorsement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  read_set_.InternalSwap(&other->read_set_);
  write_set_.InternalSwap(&other->write_set_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_id_, lhs_arena,
      &other->transaction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &endorser_signature_, lhs_arena,
      &other->endorser_signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Endorsement, aborted_)
      + sizeof(Endorsement::aborted_)
      - PROTOBUF_FIELD_OFFSET(Endorsement, received_ts_)>(
          reinterpret_cast<char*>(&received_ts_),
          reinterpret_cast<char*>(&other->received_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Endorsement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[5]);
}

// ===================================================================

class TransactionProposal::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& received_ts(const TransactionProposal* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TransactionProposal::_Internal::received_ts(const TransactionProposal* msg) {
  return *msg->received_ts_;
}
void TransactionProposal::clear_received_ts() {
  if (GetArenaForAllocation() == nullptr && received_ts_ != nullptr) {
    delete received_ts_;
  }
  received_ts_ = nullptr;
}
TransactionProposal::TransactionProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransactionProposal)
}
TransactionProposal::TransactionProposal(const TransactionProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_received_ts()) {
    received_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.received_ts_);
  } else {
    received_ts_ = nullptr;
  }
  ::memcpy(&execution_delay_, &from.execution_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&execution_delay_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:TransactionProposal)
}

void TransactionProposal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&received_ts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&received_ts_)) + sizeof(type_));
}

TransactionProposal::~TransactionProposal() {
  // @@protoc_insertion_point(destructor:TransactionProposal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete received_ts_;
}

void TransactionProposal::ArenaDtor(void* object) {
  TransactionProposal* _this = reinterpret_cast< TransactionProposal* >(object);
  (void)_this;
}
void TransactionProposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionProposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:TransactionProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  values_.Clear();
  if (GetArenaForAllocation() == nullptr && received_ts_ != nullptr) {
    delete received_ts_;
  }
  received_ts_ = nullptr;
  ::memset(&execution_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&execution_delay_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionProposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TransactionProposal.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::TransactionProposal_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransactionProposal.keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 execution_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          execution_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp received_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_received_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionProposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransactionProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransactionProposal.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransactionProposal.keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated bytes values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteBytes(3, s, target);
  }

  // uint64 execution_delay = 4;
  if (this->_internal_execution_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_execution_delay(), target);
  }

  // .google.protobuf.Timestamp received_ts = 5;
  if (this->_internal_has_received_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::received_ts(this), target, stream);
  }

  // uint64 id = 6;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransactionProposal)
  return target;
}

size_t TransactionProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransactionProposal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  // repeated bytes values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      values_.Get(i));
  }

  // .google.protobuf.Timestamp received_ts = 5;
  if (this->_internal_has_received_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *received_ts_);
  }

  // uint64 execution_delay = 4;
  if (this->_internal_execution_delay() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_execution_delay());
  }

  // uint64 id = 6;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // .TransactionProposal.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionProposal::GetClassData() const { return &_class_data_; }

void TransactionProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionProposal *>(to)->MergeFrom(
      static_cast<const TransactionProposal &>(from));
}


void TransactionProposal::MergeFrom(const TransactionProposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransactionProposal)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from._internal_has_received_ts()) {
    _internal_mutable_received_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_received_ts());
  }
  if (from._internal_execution_delay() != 0) {
    _internal_set_execution_delay(from._internal_execution_delay());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionProposal::CopyFrom(const TransactionProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransactionProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionProposal::IsInitialized() const {
  return true;
}

void TransactionProposal::InternalSwap(TransactionProposal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionProposal, type_)
      + sizeof(TransactionProposal::type_)
      - PROTOBUF_FIELD_OFFSET(TransactionProposal, received_ts_)>(
          reinterpret_cast<char*>(&received_ts_),
          reinterpret_cast<char*>(&other->received_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionProposal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[6]);
}

// ===================================================================

class Request::_Internal {
 public:
  static const ::Endorsement& endorsement(const Request* msg);
  static const ::TransactionProposal& proposal(const Request* msg);
};

const ::Endorsement&
Request::_Internal::endorsement(const Request* msg) {
  return *msg->endorsement_;
}
const ::TransactionProposal&
Request::_Internal::proposal(const Request* msg) {
  return *msg->proposal_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_endorsement()) {
    endorsement_ = new ::Endorsement(*from.endorsement_);
  } else {
    endorsement_ = nullptr;
  }
  if (from._internal_has_proposal()) {
    proposal_ = new ::TransactionProposal(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Request)
}

void Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&endorsement_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proposal_) -
    reinterpret_cast<char*>(&endorsement_)) + sizeof(proposal_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete endorsement_;
  if (this != internal_default_instance()) delete proposal_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && endorsement_ != nullptr) {
    delete endorsement_;
  }
  endorsement_ = nullptr;
  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Endorsement endorsement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_endorsement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransactionProposal proposal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Endorsement endorsement = 1;
  if (this->_internal_has_endorsement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::endorsement(this), target, stream);
  }

  // .TransactionProposal proposal = 2;
  if (this->_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::proposal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Endorsement endorsement = 1;
  if (this->_internal_has_endorsement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endorsement_);
  }

  // .TransactionProposal proposal = 2;
  if (this->_internal_has_proposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_endorsement()) {
    _internal_mutable_endorsement()->::Endorsement::MergeFrom(from._internal_endorsement());
  }
  if (from._internal_has_proposal()) {
    _internal_mutable_proposal()->::TransactionProposal::MergeFrom(from._internal_proposal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, proposal_)
      + sizeof(Request::proposal_)
      - PROTOBUF_FIELD_OFFSET(Request, endorsement_)>(
          reinterpret_cast<char*>(&endorsement_),
          reinterpret_cast<char*>(&other->endorsement_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[7]);
}

// ===================================================================

class Block::_Internal {
 public:
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prev_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_block_hash().empty()) {
    prev_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prev_block_hash(), 
      GetArenaForAllocation());
  }
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:Block)
}

void Block::SharedCtor() {
prev_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_id_ = uint64_t{0u};
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:Block)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prev_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  prev_block_hash_.ClearToEmpty();
  block_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Endorsement transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prev_block_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prev_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Block.prev_block_hash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Endorsement transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  // uint64 block_id = 2;
  if (this->_internal_block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_id(), target);
  }

  // string prev_block_hash = 3;
  if (!this->_internal_prev_block_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_block_hash().data(), static_cast<int>(this->_internal_prev_block_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Block.prev_block_hash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prev_block_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Endorsement transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string prev_block_hash = 3;
  if (!this->_internal_prev_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_block_hash());
  }

  // uint64 block_id = 2;
  if (this->_internal_block_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }

void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Block *>(to)->MergeFrom(
      static_cast<const Block &>(from));
}


void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Block)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (!from._internal_prev_block_hash().empty()) {
    _internal_set_prev_block_hash(from._internal_prev_block_hash());
  }
  if (from._internal_block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prev_block_hash_, lhs_arena,
      &other->prev_block_hash_, rhs_arena
  );
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[8]);
}

// ===================================================================

class Action::_Internal {
 public:
};

Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&blocksize_, &from.blocksize_,
    static_cast<size_t>(reinterpret_cast<char*>(&reorder_) -
    reinterpret_cast<char*>(&blocksize_)) + sizeof(reorder_));
  // @@protoc_insertion_point(copy_constructor:Action)
}

void Action::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blocksize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reorder_) -
    reinterpret_cast<char*>(&blocksize_)) + sizeof(reorder_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&blocksize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reorder_) -
      reinterpret_cast<char*>(&blocksize_)) + sizeof(reorder_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 blocksize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool early_execution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          early_execution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reorder = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blocksize = 1;
  if (this->_internal_blocksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blocksize(), target);
  }

  // bool early_execution = 2;
  if (this->_internal_early_execution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_early_execution(), target);
  }

  // bool reorder = 3;
  if (this->_internal_reorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_reorder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 blocksize = 1;
  if (this->_internal_blocksize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_blocksize());
  }

  // bool early_execution = 2;
  if (this->_internal_early_execution() != 0) {
    total_size += 1 + 1;
  }

  // bool reorder = 3;
  if (this->_internal_reorder() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }

void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action *>(to)->MergeFrom(
      static_cast<const Action &>(from));
}


void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Action)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_blocksize() != 0) {
    _internal_set_blocksize(from._internal_blocksize());
  }
  if (from._internal_early_execution() != 0) {
    _internal_set_early_execution(from._internal_early_execution());
  }
  if (from._internal_reorder() != 0) {
    _internal_set_reorder(from._internal_reorder());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Action, reorder_)
      + sizeof(Action::reorder_)
      - PROTOBUF_FIELD_OFFSET(Action, blocksize_)>(
          reinterpret_cast<char*>(&blocksize_),
          reinterpret_cast<char*>(&other->blocksize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[9]);
}

// ===================================================================

class Reward::_Internal {
 public:
};

Reward::Reward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Reward)
}
Reward::Reward(const Reward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&throughput_, &from.throughput_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_leader_) -
    reinterpret_cast<char*>(&throughput_)) + sizeof(is_leader_));
  // @@protoc_insertion_point(copy_constructor:Reward)
}

void Reward::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&throughput_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_leader_) -
    reinterpret_cast<char*>(&throughput_)) + sizeof(is_leader_));
}

Reward::~Reward() {
  // @@protoc_insertion_point(destructor:Reward)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Reward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Reward::ArenaDtor(void* object) {
  Reward* _this = reinterpret_cast< Reward* >(object);
  (void)_this;
}
void Reward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Reward::Clear() {
// @@protoc_insertion_point(message_clear_start:Reward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&throughput_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_leader_) -
      reinterpret_cast<char*>(&throughput_)) + sizeof(is_leader_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double throughput = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          throughput_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_leader = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Reward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double throughput = 1;
  if (!(this->_internal_throughput() <= 0 && this->_internal_throughput() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_throughput(), target);
  }

  // bool is_leader = 2;
  if (this->_internal_is_leader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_leader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Reward)
  return target;
}

size_t Reward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Reward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double throughput = 1;
  if (!(this->_internal_throughput() <= 0 && this->_internal_throughput() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_leader = 2;
  if (this->_internal_is_leader() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Reward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reward::GetClassData() const { return &_class_data_; }

void Reward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Reward *>(to)->MergeFrom(
      static_cast<const Reward &>(from));
}


void Reward::MergeFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Reward)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_throughput() <= 0 && from._internal_throughput() >= 0)) {
    _internal_set_throughput(from._internal_throughput());
  }
  if (from._internal_is_leader() != 0) {
    _internal_set_is_leader(from._internal_is_leader());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reward::CopyFrom(const Reward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {
  return true;
}

void Reward::InternalSwap(Reward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Reward, is_leader_)
      + sizeof(Reward::is_leader_)
      - PROTOBUF_FIELD_OFFSET(Reward, throughput_)>(
          reinterpret_cast<char*>(&throughput_),
          reinterpret_cast<char*>(&other->throughput_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Reward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[10]);
}

// ===================================================================

class Experience::_Internal {
 public:
  static const ::Action& action(const Experience* msg);
  static const ::Reward& reward(const Experience* msg);
};

const ::Action&
Experience::_Internal::action(const Experience* msg) {
  return *msg->action_;
}
const ::Reward&
Experience::_Internal::reward(const Experience* msg) {
  return *msg->reward_;
}
Experience::Experience(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Experience)
}
Experience::Experience(const Experience& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  if (from._internal_has_reward()) {
    reward_ = new ::Reward(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  ::memcpy(&write_ratio_, &from.write_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_delay_) -
    reinterpret_cast<char*>(&write_ratio_)) + sizeof(execution_delay_));
  // @@protoc_insertion_point(copy_constructor:Experience)
}

void Experience::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&execution_delay_) -
    reinterpret_cast<char*>(&action_)) + sizeof(execution_delay_));
}

Experience::~Experience() {
  // @@protoc_insertion_point(destructor:Experience)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Experience::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_;
  if (this != internal_default_instance()) delete reward_;
}

void Experience::ArenaDtor(void* object) {
  Experience* _this = reinterpret_cast< Experience* >(object);
  (void)_this;
}
void Experience::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Experience::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Experience::Clear() {
// @@protoc_insertion_point(message_clear_start:Experience)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  if (GetArenaForAllocation() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  ::memset(&write_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_delay_) -
      reinterpret_cast<char*>(&write_ratio_)) + sizeof(execution_delay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Experience::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double write_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          write_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double hot_key_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          hot_key_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double trans_arrival_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          trans_arrival_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double execution_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          execution_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .Action action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Reward reward = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Experience::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Experience)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double write_ratio = 1;
  if (!(this->_internal_write_ratio() <= 0 && this->_internal_write_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_write_ratio(), target);
  }

  // double hot_key_ratio = 2;
  if (!(this->_internal_hot_key_ratio() <= 0 && this->_internal_hot_key_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_hot_key_ratio(), target);
  }

  // double trans_arrival_rate = 3;
  if (!(this->_internal_trans_arrival_rate() <= 0 && this->_internal_trans_arrival_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_trans_arrival_rate(), target);
  }

  // double execution_delay = 4;
  if (!(this->_internal_execution_delay() <= 0 && this->_internal_execution_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_execution_delay(), target);
  }

  // .Action action = 5;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::action(this), target, stream);
  }

  // .Reward reward = 6;
  if (this->_internal_has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::reward(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Experience)
  return target;
}

size_t Experience::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Experience)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Action action = 5;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // .Reward reward = 6;
  if (this->_internal_has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // double write_ratio = 1;
  if (!(this->_internal_write_ratio() <= 0 && this->_internal_write_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double hot_key_ratio = 2;
  if (!(this->_internal_hot_key_ratio() <= 0 && this->_internal_hot_key_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double trans_arrival_rate = 3;
  if (!(this->_internal_trans_arrival_rate() <= 0 && this->_internal_trans_arrival_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double execution_delay = 4;
  if (!(this->_internal_execution_delay() <= 0 && this->_internal_execution_delay() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Experience::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Experience::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Experience::GetClassData() const { return &_class_data_; }

void Experience::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Experience *>(to)->MergeFrom(
      static_cast<const Experience &>(from));
}


void Experience::MergeFrom(const Experience& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Experience)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action()) {
    _internal_mutable_action()->::Action::MergeFrom(from._internal_action());
  }
  if (from._internal_has_reward()) {
    _internal_mutable_reward()->::Reward::MergeFrom(from._internal_reward());
  }
  if (!(from._internal_write_ratio() <= 0 && from._internal_write_ratio() >= 0)) {
    _internal_set_write_ratio(from._internal_write_ratio());
  }
  if (!(from._internal_hot_key_ratio() <= 0 && from._internal_hot_key_ratio() >= 0)) {
    _internal_set_hot_key_ratio(from._internal_hot_key_ratio());
  }
  if (!(from._internal_trans_arrival_rate() <= 0 && from._internal_trans_arrival_rate() >= 0)) {
    _internal_set_trans_arrival_rate(from._internal_trans_arrival_rate());
  }
  if (!(from._internal_execution_delay() <= 0 && from._internal_execution_delay() >= 0)) {
    _internal_set_execution_delay(from._internal_execution_delay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Experience::CopyFrom(const Experience& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Experience)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Experience::IsInitialized() const {
  return true;
}

void Experience::InternalSwap(Experience* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Experience, execution_delay_)
      + sizeof(Experience::execution_delay_)
      - PROTOBUF_FIELD_OFFSET(Experience, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Experience::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_blockchain_2eproto_getter, &descriptor_table_blockchain_2eproto_once,
      file_level_metadata_blockchain_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AppendRequest* Arena::CreateMaybeMessage< ::AppendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AppendResponse* Arena::CreateMaybeMessage< ::AppendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::PrepopulateResponse* Arena::CreateMaybeMessage< ::PrepopulateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PrepopulateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadItem* Arena::CreateMaybeMessage< ::ReadItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReadItem >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteItem* Arena::CreateMaybeMessage< ::WriteItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WriteItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Endorsement* Arena::CreateMaybeMessage< ::Endorsement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Endorsement >(arena);
}
template<> PROTOBUF_NOINLINE ::TransactionProposal* Arena::CreateMaybeMessage< ::TransactionProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransactionProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::Request* Arena::CreateMaybeMessage< ::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Block* Arena::CreateMaybeMessage< ::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::Action* Arena::CreateMaybeMessage< ::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::Reward* Arena::CreateMaybeMessage< ::Reward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Reward >(arena);
}
template<> PROTOBUF_NOINLINE ::Experience* Arena::CreateMaybeMessage< ::Experience >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Experience >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
