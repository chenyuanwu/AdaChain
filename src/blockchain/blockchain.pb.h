// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockchain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_blockchain_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockchain_2eproto;
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class AgentExchange;
struct AgentExchangeDefaultTypeInternal;
extern AgentExchangeDefaultTypeInternal _AgentExchange_default_instance_;
class AppendRequest;
struct AppendRequestDefaultTypeInternal;
extern AppendRequestDefaultTypeInternal _AppendRequest_default_instance_;
class AppendResponse;
struct AppendResponseDefaultTypeInternal;
extern AppendResponseDefaultTypeInternal _AppendResponse_default_instance_;
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Endorsement;
struct EndorsementDefaultTypeInternal;
extern EndorsementDefaultTypeInternal _Endorsement_default_instance_;
class OracleItem;
struct OracleItemDefaultTypeInternal;
extern OracleItemDefaultTypeInternal _OracleItem_default_instance_;
class PeerExchange;
struct PeerExchangeDefaultTypeInternal;
extern PeerExchangeDefaultTypeInternal _PeerExchange_default_instance_;
class PrepopulateResponse;
struct PrepopulateResponseDefaultTypeInternal;
extern PrepopulateResponseDefaultTypeInternal _PrepopulateResponse_default_instance_;
class ReadItem;
struct ReadItemDefaultTypeInternal;
extern ReadItemDefaultTypeInternal _ReadItem_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class TaggedEntry;
struct TaggedEntryDefaultTypeInternal;
extern TaggedEntryDefaultTypeInternal _TaggedEntry_default_instance_;
class TransactionProposal;
struct TransactionProposalDefaultTypeInternal;
extern TransactionProposalDefaultTypeInternal _TransactionProposal_default_instance_;
class WatermarkLow;
struct WatermarkLowDefaultTypeInternal;
extern WatermarkLowDefaultTypeInternal _WatermarkLow_default_instance_;
class WriteItem;
struct WriteItemDefaultTypeInternal;
extern WriteItemDefaultTypeInternal _WriteItem_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Action* Arena::CreateMaybeMessage<::Action>(Arena*);
template<> ::AgentExchange* Arena::CreateMaybeMessage<::AgentExchange>(Arena*);
template<> ::AppendRequest* Arena::CreateMaybeMessage<::AppendRequest>(Arena*);
template<> ::AppendResponse* Arena::CreateMaybeMessage<::AppendResponse>(Arena*);
template<> ::Block* Arena::CreateMaybeMessage<::Block>(Arena*);
template<> ::Endorsement* Arena::CreateMaybeMessage<::Endorsement>(Arena*);
template<> ::OracleItem* Arena::CreateMaybeMessage<::OracleItem>(Arena*);
template<> ::PeerExchange* Arena::CreateMaybeMessage<::PeerExchange>(Arena*);
template<> ::PrepopulateResponse* Arena::CreateMaybeMessage<::PrepopulateResponse>(Arena*);
template<> ::ReadItem* Arena::CreateMaybeMessage<::ReadItem>(Arena*);
template<> ::Request* Arena::CreateMaybeMessage<::Request>(Arena*);
template<> ::TaggedEntry* Arena::CreateMaybeMessage<::TaggedEntry>(Arena*);
template<> ::TransactionProposal* Arena::CreateMaybeMessage<::TransactionProposal>(Arena*);
template<> ::WatermarkLow* Arena::CreateMaybeMessage<::WatermarkLow>(Arena*);
template<> ::WriteItem* Arena::CreateMaybeMessage<::WriteItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TransactionProposal_Type : int {
  TransactionProposal_Type_Get = 0,
  TransactionProposal_Type_Put = 1,
  TransactionProposal_Type_TransactSavings = 2,
  TransactionProposal_Type_DepositChecking = 3,
  TransactionProposal_Type_SendPayment = 4,
  TransactionProposal_Type_WriteCheck = 5,
  TransactionProposal_Type_Amalgamate = 6,
  TransactionProposal_Type_Query = 7,
  TransactionProposal_Type_TransactionProposal_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransactionProposal_Type_TransactionProposal_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransactionProposal_Type_IsValid(int value);
constexpr TransactionProposal_Type TransactionProposal_Type_Type_MIN = TransactionProposal_Type_Get;
constexpr TransactionProposal_Type TransactionProposal_Type_Type_MAX = TransactionProposal_Type_Query;
constexpr int TransactionProposal_Type_Type_ARRAYSIZE = TransactionProposal_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionProposal_Type_descriptor();
template<typename T>
inline const std::string& TransactionProposal_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionProposal_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionProposal_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionProposal_Type_descriptor(), enum_t_value);
}
inline bool TransactionProposal_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionProposal_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionProposal_Type>(
    TransactionProposal_Type_descriptor(), name, value);
}
// ===================================================================

class AppendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppendRequest) */ {
 public:
  inline AppendRequest() : AppendRequest(nullptr) {}
  ~AppendRequest() override;
  explicit PROTOBUF_CONSTEXPR AppendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendRequest(const AppendRequest& from);
  AppendRequest(AppendRequest&& from) noexcept
    : AppendRequest() {
    *this = ::std::move(from);
  }

  inline AppendRequest& operator=(const AppendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendRequest& operator=(AppendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendRequest* internal_default_instance() {
    return reinterpret_cast<const AppendRequest*>(
               &_AppendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppendRequest& a, AppendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendRequest& from) {
    AppendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppendRequest";
  }
  protected:
  explicit AppendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogEntriesFieldNumber = 2,
    kLeaderCommitFieldNumber = 1,
  };
  // repeated bytes log_entries = 2;
  int log_entries_size() const;
  private:
  int _internal_log_entries_size() const;
  public:
  void clear_log_entries();
  const std::string& log_entries(int index) const;
  std::string* mutable_log_entries(int index);
  void set_log_entries(int index, const std::string& value);
  void set_log_entries(int index, std::string&& value);
  void set_log_entries(int index, const char* value);
  void set_log_entries(int index, const void* value, size_t size);
  std::string* add_log_entries();
  void add_log_entries(const std::string& value);
  void add_log_entries(std::string&& value);
  void add_log_entries(const char* value);
  void add_log_entries(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& log_entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_log_entries();
  private:
  const std::string& _internal_log_entries(int index) const;
  std::string* _internal_add_log_entries();
  public:

  // uint64 leader_commit = 1;
  void clear_leader_commit();
  uint64_t leader_commit() const;
  void set_leader_commit(uint64_t value);
  private:
  uint64_t _internal_leader_commit() const;
  void _internal_set_leader_commit(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AppendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> log_entries_;
    uint64_t leader_commit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class AppendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:AppendResponse) */ {
 public:
  inline AppendResponse() : AppendResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AppendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendResponse(const AppendResponse& from);
  AppendResponse(AppendResponse&& from) noexcept
    : AppendResponse() {
    *this = ::std::move(from);
  }

  inline AppendResponse& operator=(const AppendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendResponse& operator=(AppendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendResponse* internal_default_instance() {
    return reinterpret_cast<const AppendResponse*>(
               &_AppendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppendResponse& a, AppendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AppendResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AppendResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppendResponse";
  }
  protected:
  explicit AppendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AppendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class PrepopulateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrepopulateResponse) */ {
 public:
  inline PrepopulateResponse() : PrepopulateResponse(nullptr) {}
  ~PrepopulateResponse() override;
  explicit PROTOBUF_CONSTEXPR PrepopulateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrepopulateResponse(const PrepopulateResponse& from);
  PrepopulateResponse(PrepopulateResponse&& from) noexcept
    : PrepopulateResponse() {
    *this = ::std::move(from);
  }

  inline PrepopulateResponse& operator=(const PrepopulateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepopulateResponse& operator=(PrepopulateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrepopulateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrepopulateResponse* internal_default_instance() {
    return reinterpret_cast<const PrepopulateResponse*>(
               &_PrepopulateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrepopulateResponse& a, PrepopulateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepopulateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepopulateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrepopulateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrepopulateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrepopulateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrepopulateResponse& from) {
    PrepopulateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepopulateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrepopulateResponse";
  }
  protected:
  explicit PrepopulateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumKeysFieldNumber = 1,
  };
  // uint64 num_keys = 1;
  void clear_num_keys();
  uint64_t num_keys() const;
  void set_num_keys(uint64_t value);
  private:
  uint64_t _internal_num_keys() const;
  void _internal_set_num_keys(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PrepopulateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t num_keys_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class ReadItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReadItem) */ {
 public:
  inline ReadItem() : ReadItem(nullptr) {}
  ~ReadItem() override;
  explicit PROTOBUF_CONSTEXPR ReadItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadItem(const ReadItem& from);
  ReadItem(ReadItem&& from) noexcept
    : ReadItem() {
    *this = ::std::move(from);
  }

  inline ReadItem& operator=(const ReadItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadItem& operator=(ReadItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadItem* internal_default_instance() {
    return reinterpret_cast<const ReadItem*>(
               &_ReadItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadItem& a, ReadItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadItem& from) {
    ReadItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadItem";
  }
  protected:
  explicit ReadItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadKeyFieldNumber = 1,
    kBlockSeqNumFieldNumber = 2,
    kTransSeqNumFieldNumber = 3,
  };
  // bytes read_key = 1;
  void clear_read_key();
  const std::string& read_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_read_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_read_key();
  PROTOBUF_NODISCARD std::string* release_read_key();
  void set_allocated_read_key(std::string* read_key);
  private:
  const std::string& _internal_read_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_read_key(const std::string& value);
  std::string* _internal_mutable_read_key();
  public:

  // uint64 block_seq_num = 2;
  void clear_block_seq_num();
  uint64_t block_seq_num() const;
  void set_block_seq_num(uint64_t value);
  private:
  uint64_t _internal_block_seq_num() const;
  void _internal_set_block_seq_num(uint64_t value);
  public:

  // uint64 trans_seq_num = 3;
  void clear_trans_seq_num();
  uint64_t trans_seq_num() const;
  void set_trans_seq_num(uint64_t value);
  private:
  uint64_t _internal_trans_seq_num() const;
  void _internal_set_trans_seq_num(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReadItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr read_key_;
    uint64_t block_seq_num_;
    uint64_t trans_seq_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class WriteItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WriteItem) */ {
 public:
  inline WriteItem() : WriteItem(nullptr) {}
  ~WriteItem() override;
  explicit PROTOBUF_CONSTEXPR WriteItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteItem(const WriteItem& from);
  WriteItem(WriteItem&& from) noexcept
    : WriteItem() {
    *this = ::std::move(from);
  }

  inline WriteItem& operator=(const WriteItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteItem& operator=(WriteItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteItem* internal_default_instance() {
    return reinterpret_cast<const WriteItem*>(
               &_WriteItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteItem& a, WriteItem& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteItem& from) {
    WriteItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteItem";
  }
  protected:
  explicit WriteItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteKeyFieldNumber = 1,
    kWriteValueFieldNumber = 2,
  };
  // bytes write_key = 1;
  void clear_write_key();
  const std::string& write_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_write_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_write_key();
  PROTOBUF_NODISCARD std::string* release_write_key();
  void set_allocated_write_key(std::string* write_key);
  private:
  const std::string& _internal_write_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_write_key(const std::string& value);
  std::string* _internal_mutable_write_key();
  public:

  // bytes write_value = 2;
  void clear_write_value();
  const std::string& write_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_write_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_write_value();
  PROTOBUF_NODISCARD std::string* release_write_value();
  void set_allocated_write_value(std::string* write_value);
  private:
  const std::string& _internal_write_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_write_value(const std::string& value);
  std::string* _internal_mutable_write_value();
  public:

  // @@protoc_insertion_point(class_scope:WriteItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class OracleItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OracleItem) */ {
 public:
  inline OracleItem() : OracleItem(nullptr) {}
  ~OracleItem() override;
  explicit PROTOBUF_CONSTEXPR OracleItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OracleItem(const OracleItem& from);
  OracleItem(OracleItem&& from) noexcept
    : OracleItem() {
    *this = ::std::move(from);
  }

  inline OracleItem& operator=(const OracleItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleItem& operator=(OracleItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OracleItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const OracleItem* internal_default_instance() {
    return reinterpret_cast<const OracleItem*>(
               &_OracleItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OracleItem& a, OracleItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OracleItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OracleItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OracleItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OracleItem& from) {
    OracleItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OracleItem";
  }
  protected:
  explicit OracleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // string keys = 1;
  void clear_keys();
  const std::string& keys() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keys(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keys();
  PROTOBUF_NODISCARD std::string* release_keys();
  void set_allocated_keys(std::string* keys);
  private:
  const std::string& _internal_keys() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keys(const std::string& value);
  std::string* _internal_mutable_keys();
  public:

  // bytes values = 2;
  void clear_values();
  const std::string& values() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_values(ArgT0&& arg0, ArgT... args);
  std::string* mutable_values();
  PROTOBUF_NODISCARD std::string* release_values();
  void set_allocated_values(std::string* values);
  private:
  const std::string& _internal_values() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_values(const std::string& value);
  std::string* _internal_mutable_values();
  public:

  // @@protoc_insertion_point(class_scope:OracleItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class Endorsement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Endorsement) */ {
 public:
  inline Endorsement() : Endorsement(nullptr) {}
  ~Endorsement() override;
  explicit PROTOBUF_CONSTEXPR Endorsement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Endorsement(const Endorsement& from);
  Endorsement(Endorsement&& from) noexcept
    : Endorsement() {
    *this = ::std::move(from);
  }

  inline Endorsement& operator=(const Endorsement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Endorsement& operator=(Endorsement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Endorsement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Endorsement* internal_default_instance() {
    return reinterpret_cast<const Endorsement*>(
               &_Endorsement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Endorsement& a, Endorsement& b) {
    a.Swap(&b);
  }
  inline void Swap(Endorsement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Endorsement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Endorsement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Endorsement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Endorsement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Endorsement& from) {
    Endorsement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endorsement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Endorsement";
  }
  protected:
  explicit Endorsement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadSetFieldNumber = 1,
    kWriteSetFieldNumber = 2,
    kOracleSetFieldNumber = 10,
    kTransactionIdFieldNumber = 3,
    kEndorserSignatureFieldNumber = 5,
    kReceivedTsFieldNumber = 7,
    kExecutionStartTsFieldNumber = 8,
    kExecutionEndTsFieldNumber = 9,
    kEndorserIdFieldNumber = 4,
    kAbortedFieldNumber = 6,
  };
  // repeated .ReadItem read_set = 1;
  int read_set_size() const;
  private:
  int _internal_read_set_size() const;
  public:
  void clear_read_set();
  ::ReadItem* mutable_read_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadItem >*
      mutable_read_set();
  private:
  const ::ReadItem& _internal_read_set(int index) const;
  ::ReadItem* _internal_add_read_set();
  public:
  const ::ReadItem& read_set(int index) const;
  ::ReadItem* add_read_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadItem >&
      read_set() const;

  // repeated .WriteItem write_set = 2;
  int write_set_size() const;
  private:
  int _internal_write_set_size() const;
  public:
  void clear_write_set();
  ::WriteItem* mutable_write_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteItem >*
      mutable_write_set();
  private:
  const ::WriteItem& _internal_write_set(int index) const;
  ::WriteItem* _internal_add_write_set();
  public:
  const ::WriteItem& write_set(int index) const;
  ::WriteItem* add_write_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteItem >&
      write_set() const;

  // repeated .OracleItem oracle_set = 10;
  int oracle_set_size() const;
  private:
  int _internal_oracle_set_size() const;
  public:
  void clear_oracle_set();
  ::OracleItem* mutable_oracle_set(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OracleItem >*
      mutable_oracle_set();
  private:
  const ::OracleItem& _internal_oracle_set(int index) const;
  ::OracleItem* _internal_add_oracle_set();
  public:
  const ::OracleItem& oracle_set(int index) const;
  ::OracleItem* add_oracle_set();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OracleItem >&
      oracle_set() const;

  // bytes transaction_id = 3;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // bytes endorser_signature = 5;
  void clear_endorser_signature();
  const std::string& endorser_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endorser_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endorser_signature();
  PROTOBUF_NODISCARD std::string* release_endorser_signature();
  void set_allocated_endorser_signature(std::string* endorser_signature);
  private:
  const std::string& _internal_endorser_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endorser_signature(const std::string& value);
  std::string* _internal_mutable_endorser_signature();
  public:

  // .google.protobuf.Timestamp received_ts = 7;
  bool has_received_ts() const;
  private:
  bool _internal_has_received_ts() const;
  public:
  void clear_received_ts();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& received_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_received_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_received_ts();
  void set_allocated_received_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_received_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_received_ts();
  public:
  void unsafe_arena_set_allocated_received_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_received_ts();

  // .google.protobuf.Timestamp execution_start_ts = 8;
  bool has_execution_start_ts() const;
  private:
  bool _internal_has_execution_start_ts() const;
  public:
  void clear_execution_start_ts();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& execution_start_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_execution_start_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_execution_start_ts();
  void set_allocated_execution_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_execution_start_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_execution_start_ts();
  public:
  void unsafe_arena_set_allocated_execution_start_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_execution_start_ts();

  // .google.protobuf.Timestamp execution_end_ts = 9;
  bool has_execution_end_ts() const;
  private:
  bool _internal_has_execution_end_ts() const;
  public:
  void clear_execution_end_ts();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& execution_end_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_execution_end_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_execution_end_ts();
  void set_allocated_execution_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* execution_end_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_execution_end_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_execution_end_ts();
  public:
  void unsafe_arena_set_allocated_execution_end_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* execution_end_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_execution_end_ts();

  // uint64 endorser_id = 4;
  void clear_endorser_id();
  uint64_t endorser_id() const;
  void set_endorser_id(uint64_t value);
  private:
  uint64_t _internal_endorser_id() const;
  void _internal_set_endorser_id(uint64_t value);
  public:

  // bool aborted = 6;
  void clear_aborted();
  bool aborted() const;
  void set_aborted(bool value);
  private:
  bool _internal_aborted() const;
  void _internal_set_aborted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Endorsement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadItem > read_set_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteItem > write_set_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OracleItem > oracle_set_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endorser_signature_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_ts_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* execution_end_ts_;
    uint64_t endorser_id_;
    bool aborted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class TransactionProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransactionProposal) */ {
 public:
  inline TransactionProposal() : TransactionProposal(nullptr) {}
  ~TransactionProposal() override;
  explicit PROTOBUF_CONSTEXPR TransactionProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionProposal(const TransactionProposal& from);
  TransactionProposal(TransactionProposal&& from) noexcept
    : TransactionProposal() {
    *this = ::std::move(from);
  }

  inline TransactionProposal& operator=(const TransactionProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionProposal& operator=(TransactionProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionProposal* internal_default_instance() {
    return reinterpret_cast<const TransactionProposal*>(
               &_TransactionProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TransactionProposal& a, TransactionProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionProposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionProposal& from) {
    TransactionProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransactionProposal";
  }
  protected:
  explicit TransactionProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TransactionProposal_Type Type;
  static constexpr Type Get =
    TransactionProposal_Type_Get;
  static constexpr Type Put =
    TransactionProposal_Type_Put;
  static constexpr Type TransactSavings =
    TransactionProposal_Type_TransactSavings;
  static constexpr Type DepositChecking =
    TransactionProposal_Type_DepositChecking;
  static constexpr Type SendPayment =
    TransactionProposal_Type_SendPayment;
  static constexpr Type WriteCheck =
    TransactionProposal_Type_WriteCheck;
  static constexpr Type Amalgamate =
    TransactionProposal_Type_Amalgamate;
  static constexpr Type Query =
    TransactionProposal_Type_Query;
  static inline bool Type_IsValid(int value) {
    return TransactionProposal_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TransactionProposal_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TransactionProposal_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TransactionProposal_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TransactionProposal_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TransactionProposal_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return TransactionProposal_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kValuesFieldNumber = 3,
    kReceivedTsFieldNumber = 5,
    kExecutionDelayFieldNumber = 4,
    kIdFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // repeated string keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // repeated bytes values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // .google.protobuf.Timestamp received_ts = 5;
  bool has_received_ts() const;
  private:
  bool _internal_has_received_ts() const;
  public:
  void clear_received_ts();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& received_ts() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_received_ts();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_received_ts();
  void set_allocated_received_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_received_ts() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_received_ts();
  public:
  void unsafe_arena_set_allocated_received_ts(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_received_ts();

  // uint64 execution_delay = 4;
  void clear_execution_delay();
  uint64_t execution_delay() const;
  void set_execution_delay(uint64_t value);
  private:
  uint64_t _internal_execution_delay() const;
  void _internal_set_execution_delay(uint64_t value);
  public:

  // uint64 id = 6;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // .TransactionProposal.Type type = 1;
  void clear_type();
  ::TransactionProposal_Type type() const;
  void set_type(::TransactionProposal_Type value);
  private:
  ::TransactionProposal_Type _internal_type() const;
  void _internal_set_type(::TransactionProposal_Type value);
  public:

  // @@protoc_insertion_point(class_scope:TransactionProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts_;
    uint64_t execution_delay_;
    uint64_t id_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndorsementFieldNumber = 1,
    kProposalFieldNumber = 2,
  };
  // .Endorsement endorsement = 1;
  bool has_endorsement() const;
  private:
  bool _internal_has_endorsement() const;
  public:
  void clear_endorsement();
  const ::Endorsement& endorsement() const;
  PROTOBUF_NODISCARD ::Endorsement* release_endorsement();
  ::Endorsement* mutable_endorsement();
  void set_allocated_endorsement(::Endorsement* endorsement);
  private:
  const ::Endorsement& _internal_endorsement() const;
  ::Endorsement* _internal_mutable_endorsement();
  public:
  void unsafe_arena_set_allocated_endorsement(
      ::Endorsement* endorsement);
  ::Endorsement* unsafe_arena_release_endorsement();

  // .TransactionProposal proposal = 2;
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::TransactionProposal& proposal() const;
  PROTOBUF_NODISCARD ::TransactionProposal* release_proposal();
  ::TransactionProposal* mutable_proposal();
  void set_allocated_proposal(::TransactionProposal* proposal);
  private:
  const ::TransactionProposal& _internal_proposal() const;
  ::TransactionProposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::TransactionProposal* proposal);
  ::TransactionProposal* unsafe_arena_release_proposal();

  // @@protoc_insertion_point(class_scope:Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Endorsement* endorsement_;
    ::TransactionProposal* proposal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block& from) {
    Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
    kPrevBlockHashFieldNumber = 3,
    kBlockIdFieldNumber = 2,
  };
  // repeated .Endorsement transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::Endorsement* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endorsement >*
      mutable_transactions();
  private:
  const ::Endorsement& _internal_transactions(int index) const;
  ::Endorsement* _internal_add_transactions();
  public:
  const ::Endorsement& transactions(int index) const;
  ::Endorsement* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endorsement >&
      transactions() const;

  // string prev_block_hash = 3;
  void clear_prev_block_hash();
  const std::string& prev_block_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_block_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_block_hash();
  PROTOBUF_NODISCARD std::string* release_prev_block_hash();
  void set_allocated_prev_block_hash(std::string* prev_block_hash);
  private:
  const std::string& _internal_prev_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_block_hash(const std::string& value);
  std::string* _internal_mutable_prev_block_hash();
  public:

  // uint64 block_id = 2;
  void clear_block_id();
  uint64_t block_id() const;
  void set_block_id(uint64_t value);
  private:
  uint64_t _internal_block_id() const;
  void _internal_set_block_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endorsement > transactions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_block_hash_;
    uint64_t block_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  ~Action() override;
  explicit PROTOBUF_CONSTEXPR Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Action& from) {
    Action::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksizeFieldNumber = 1,
    kEarlyExecutionFieldNumber = 2,
    kReorderFieldNumber = 3,
  };
  // uint64 blocksize = 1;
  void clear_blocksize();
  uint64_t blocksize() const;
  void set_blocksize(uint64_t value);
  private:
  uint64_t _internal_blocksize() const;
  void _internal_set_blocksize(uint64_t value);
  public:

  // bool early_execution = 2;
  void clear_early_execution();
  bool early_execution() const;
  void set_early_execution(bool value);
  private:
  bool _internal_early_execution() const;
  void _internal_set_early_execution(bool value);
  public:

  // bool reorder = 3;
  void clear_reorder();
  bool reorder() const;
  void set_reorder(bool value);
  private:
  bool _internal_reorder() const;
  void _internal_set_reorder(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t blocksize_;
    bool early_execution_;
    bool reorder_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class WatermarkLow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WatermarkLow) */ {
 public:
  inline WatermarkLow() : WatermarkLow(nullptr) {}
  ~WatermarkLow() override;
  explicit PROTOBUF_CONSTEXPR WatermarkLow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatermarkLow(const WatermarkLow& from);
  WatermarkLow(WatermarkLow&& from) noexcept
    : WatermarkLow() {
    *this = ::std::move(from);
  }

  inline WatermarkLow& operator=(const WatermarkLow& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatermarkLow& operator=(WatermarkLow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatermarkLow& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatermarkLow* internal_default_instance() {
    return reinterpret_cast<const WatermarkLow*>(
               &_WatermarkLow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WatermarkLow& a, WatermarkLow& b) {
    a.Swap(&b);
  }
  inline void Swap(WatermarkLow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatermarkLow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatermarkLow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatermarkLow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatermarkLow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WatermarkLow& from) {
    WatermarkLow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatermarkLow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WatermarkLow";
  }
  protected:
  explicit WatermarkLow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThroughputFieldNumber = 1,
    kBlockIdStartFieldNumber = 2,
    kBlockIdNowFieldNumber = 3,
  };
  // double throughput = 1;
  void clear_throughput();
  double throughput() const;
  void set_throughput(double value);
  private:
  double _internal_throughput() const;
  void _internal_set_throughput(double value);
  public:

  // uint64 block_id_start = 2;
  void clear_block_id_start();
  uint64_t block_id_start() const;
  void set_block_id_start(uint64_t value);
  private:
  uint64_t _internal_block_id_start() const;
  void _internal_set_block_id_start(uint64_t value);
  public:

  // uint64 block_id_now = 3;
  void clear_block_id_now();
  uint64_t block_id_now() const;
  void set_block_id_now(uint64_t value);
  private:
  uint64_t _internal_block_id_now() const;
  void _internal_set_block_id_now(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:WatermarkLow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double throughput_;
    uint64_t block_id_start_;
    uint64_t block_id_now_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class AgentExchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AgentExchange) */ {
 public:
  inline AgentExchange() : AgentExchange(nullptr) {}
  ~AgentExchange() override;
  explicit PROTOBUF_CONSTEXPR AgentExchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentExchange(const AgentExchange& from);
  AgentExchange(AgentExchange&& from) noexcept
    : AgentExchange() {
    *this = ::std::move(from);
  }

  inline AgentExchange& operator=(const AgentExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentExchange& operator=(AgentExchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentExchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentExchange* internal_default_instance() {
    return reinterpret_cast<const AgentExchange*>(
               &_AgentExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AgentExchange& a, AgentExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentExchange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentExchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentExchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentExchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentExchange& from) {
    AgentExchange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentExchange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AgentExchange";
  }
  protected:
  explicit AgentExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginatorFieldNumber = 1,
    kWriteRatioFieldNumber = 2,
    kHotKeyRatioFieldNumber = 3,
    kTransArrivalRateFieldNumber = 4,
    kExecutionDelayFieldNumber = 5,
    kThroughputFieldNumber = 6,
  };
  // string originator = 1;
  void clear_originator();
  const std::string& originator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originator();
  PROTOBUF_NODISCARD std::string* release_originator();
  void set_allocated_originator(std::string* originator);
  private:
  const std::string& _internal_originator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originator(const std::string& value);
  std::string* _internal_mutable_originator();
  public:

  // double write_ratio = 2;
  void clear_write_ratio();
  double write_ratio() const;
  void set_write_ratio(double value);
  private:
  double _internal_write_ratio() const;
  void _internal_set_write_ratio(double value);
  public:

  // double hot_key_ratio = 3;
  void clear_hot_key_ratio();
  double hot_key_ratio() const;
  void set_hot_key_ratio(double value);
  private:
  double _internal_hot_key_ratio() const;
  void _internal_set_hot_key_ratio(double value);
  public:

  // double trans_arrival_rate = 4;
  void clear_trans_arrival_rate();
  double trans_arrival_rate() const;
  void set_trans_arrival_rate(double value);
  private:
  double _internal_trans_arrival_rate() const;
  void _internal_set_trans_arrival_rate(double value);
  public:

  // double execution_delay = 5;
  void clear_execution_delay();
  double execution_delay() const;
  void set_execution_delay(double value);
  private:
  double _internal_execution_delay() const;
  void _internal_set_execution_delay(double value);
  public:

  // double throughput = 6;
  void clear_throughput();
  double throughput() const;
  void set_throughput(double value);
  private:
  double _internal_throughput() const;
  void _internal_set_throughput(double value);
  public:

  // @@protoc_insertion_point(class_scope:AgentExchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originator_;
    double write_ratio_;
    double hot_key_ratio_;
    double trans_arrival_rate_;
    double execution_delay_;
    double throughput_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class PeerExchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PeerExchange) */ {
 public:
  inline PeerExchange() : PeerExchange(nullptr) {}
  ~PeerExchange() override;
  explicit PROTOBUF_CONSTEXPR PeerExchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerExchange(const PeerExchange& from);
  PeerExchange(PeerExchange&& from) noexcept
    : PeerExchange() {
    *this = ::std::move(from);
  }

  inline PeerExchange& operator=(const PeerExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerExchange& operator=(PeerExchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerExchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerExchange* internal_default_instance() {
    return reinterpret_cast<const PeerExchange*>(
               &_PeerExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PeerExchange& a, PeerExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerExchange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerExchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerExchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeerExchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeerExchange& from) {
    PeerExchange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerExchange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PeerExchange";
  }
  protected:
  explicit PeerExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIndexFieldNumber = 1,
    kRaftIndexFieldNumber = 2,
    kNoProgressFieldNumber = 3,
  };
  // uint64 block_index = 1;
  void clear_block_index();
  uint64_t block_index() const;
  void set_block_index(uint64_t value);
  private:
  uint64_t _internal_block_index() const;
  void _internal_set_block_index(uint64_t value);
  public:

  // uint64 raft_index = 2;
  void clear_raft_index();
  uint64_t raft_index() const;
  void set_raft_index(uint64_t value);
  private:
  uint64_t _internal_raft_index() const;
  void _internal_set_raft_index(uint64_t value);
  public:

  // bool no_progress = 3;
  void clear_no_progress();
  bool no_progress() const;
  void set_no_progress(bool value);
  private:
  bool _internal_no_progress() const;
  void _internal_set_no_progress(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PeerExchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t block_index_;
    uint64_t raft_index_;
    bool no_progress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// -------------------------------------------------------------------

class TaggedEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TaggedEntry) */ {
 public:
  inline TaggedEntry() : TaggedEntry(nullptr) {}
  ~TaggedEntry() override;
  explicit PROTOBUF_CONSTEXPR TaggedEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaggedEntry(const TaggedEntry& from);
  TaggedEntry(TaggedEntry&& from) noexcept
    : TaggedEntry() {
    *this = ::std::move(from);
  }

  inline TaggedEntry& operator=(const TaggedEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaggedEntry& operator=(TaggedEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaggedEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaggedEntry* internal_default_instance() {
    return reinterpret_cast<const TaggedEntry*>(
               &_TaggedEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TaggedEntry& a, TaggedEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TaggedEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaggedEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaggedEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaggedEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaggedEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaggedEntry& from) {
    TaggedEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaggedEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TaggedEntry";
  }
  protected:
  explicit TaggedEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 2,
    kTagFieldNumber = 1,
  };
  // bytes entry = 2;
  void clear_entry();
  const std::string& entry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entry();
  PROTOBUF_NODISCARD std::string* release_entry();
  void set_allocated_entry(std::string* entry);
  private:
  const std::string& _internal_entry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entry(const std::string& value);
  std::string* _internal_mutable_entry();
  public:

  // uint64 tag = 1;
  void clear_tag();
  uint64_t tag() const;
  void set_tag(uint64_t value);
  private:
  uint64_t _internal_tag() const;
  void _internal_set_tag(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TaggedEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_;
    uint64_t tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_blockchain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppendRequest

// uint64 leader_commit = 1;
inline void AppendRequest::clear_leader_commit() {
  _impl_.leader_commit_ = uint64_t{0u};
}
inline uint64_t AppendRequest::_internal_leader_commit() const {
  return _impl_.leader_commit_;
}
inline uint64_t AppendRequest::leader_commit() const {
  // @@protoc_insertion_point(field_get:AppendRequest.leader_commit)
  return _internal_leader_commit();
}
inline void AppendRequest::_internal_set_leader_commit(uint64_t value) {
  
  _impl_.leader_commit_ = value;
}
inline void AppendRequest::set_leader_commit(uint64_t value) {
  _internal_set_leader_commit(value);
  // @@protoc_insertion_point(field_set:AppendRequest.leader_commit)
}

// repeated bytes log_entries = 2;
inline int AppendRequest::_internal_log_entries_size() const {
  return _impl_.log_entries_.size();
}
inline int AppendRequest::log_entries_size() const {
  return _internal_log_entries_size();
}
inline void AppendRequest::clear_log_entries() {
  _impl_.log_entries_.Clear();
}
inline std::string* AppendRequest::add_log_entries() {
  std::string* _s = _internal_add_log_entries();
  // @@protoc_insertion_point(field_add_mutable:AppendRequest.log_entries)
  return _s;
}
inline const std::string& AppendRequest::_internal_log_entries(int index) const {
  return _impl_.log_entries_.Get(index);
}
inline const std::string& AppendRequest::log_entries(int index) const {
  // @@protoc_insertion_point(field_get:AppendRequest.log_entries)
  return _internal_log_entries(index);
}
inline std::string* AppendRequest::mutable_log_entries(int index) {
  // @@protoc_insertion_point(field_mutable:AppendRequest.log_entries)
  return _impl_.log_entries_.Mutable(index);
}
inline void AppendRequest::set_log_entries(int index, const std::string& value) {
  _impl_.log_entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AppendRequest.log_entries)
}
inline void AppendRequest::set_log_entries(int index, std::string&& value) {
  _impl_.log_entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AppendRequest.log_entries)
}
inline void AppendRequest::set_log_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.log_entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AppendRequest.log_entries)
}
inline void AppendRequest::set_log_entries(int index, const void* value, size_t size) {
  _impl_.log_entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AppendRequest.log_entries)
}
inline std::string* AppendRequest::_internal_add_log_entries() {
  return _impl_.log_entries_.Add();
}
inline void AppendRequest::add_log_entries(const std::string& value) {
  _impl_.log_entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AppendRequest.log_entries)
}
inline void AppendRequest::add_log_entries(std::string&& value) {
  _impl_.log_entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AppendRequest.log_entries)
}
inline void AppendRequest::add_log_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.log_entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AppendRequest.log_entries)
}
inline void AppendRequest::add_log_entries(const void* value, size_t size) {
  _impl_.log_entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AppendRequest.log_entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppendRequest::log_entries() const {
  // @@protoc_insertion_point(field_list:AppendRequest.log_entries)
  return _impl_.log_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppendRequest::mutable_log_entries() {
  // @@protoc_insertion_point(field_mutable_list:AppendRequest.log_entries)
  return &_impl_.log_entries_;
}

// -------------------------------------------------------------------

// AppendResponse

// -------------------------------------------------------------------

// PrepopulateResponse

// uint64 num_keys = 1;
inline void PrepopulateResponse::clear_num_keys() {
  _impl_.num_keys_ = uint64_t{0u};
}
inline uint64_t PrepopulateResponse::_internal_num_keys() const {
  return _impl_.num_keys_;
}
inline uint64_t PrepopulateResponse::num_keys() const {
  // @@protoc_insertion_point(field_get:PrepopulateResponse.num_keys)
  return _internal_num_keys();
}
inline void PrepopulateResponse::_internal_set_num_keys(uint64_t value) {
  
  _impl_.num_keys_ = value;
}
inline void PrepopulateResponse::set_num_keys(uint64_t value) {
  _internal_set_num_keys(value);
  // @@protoc_insertion_point(field_set:PrepopulateResponse.num_keys)
}

// -------------------------------------------------------------------

// ReadItem

// bytes read_key = 1;
inline void ReadItem::clear_read_key() {
  _impl_.read_key_.ClearToEmpty();
}
inline const std::string& ReadItem::read_key() const {
  // @@protoc_insertion_point(field_get:ReadItem.read_key)
  return _internal_read_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadItem::set_read_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.read_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReadItem.read_key)
}
inline std::string* ReadItem::mutable_read_key() {
  std::string* _s = _internal_mutable_read_key();
  // @@protoc_insertion_point(field_mutable:ReadItem.read_key)
  return _s;
}
inline const std::string& ReadItem::_internal_read_key() const {
  return _impl_.read_key_.Get();
}
inline void ReadItem::_internal_set_read_key(const std::string& value) {
  
  _impl_.read_key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadItem::_internal_mutable_read_key() {
  
  return _impl_.read_key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadItem::release_read_key() {
  // @@protoc_insertion_point(field_release:ReadItem.read_key)
  return _impl_.read_key_.Release();
}
inline void ReadItem::set_allocated_read_key(std::string* read_key) {
  if (read_key != nullptr) {
    
  } else {
    
  }
  _impl_.read_key_.SetAllocated(read_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.read_key_.IsDefault()) {
    _impl_.read_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReadItem.read_key)
}

// uint64 block_seq_num = 2;
inline void ReadItem::clear_block_seq_num() {
  _impl_.block_seq_num_ = uint64_t{0u};
}
inline uint64_t ReadItem::_internal_block_seq_num() const {
  return _impl_.block_seq_num_;
}
inline uint64_t ReadItem::block_seq_num() const {
  // @@protoc_insertion_point(field_get:ReadItem.block_seq_num)
  return _internal_block_seq_num();
}
inline void ReadItem::_internal_set_block_seq_num(uint64_t value) {
  
  _impl_.block_seq_num_ = value;
}
inline void ReadItem::set_block_seq_num(uint64_t value) {
  _internal_set_block_seq_num(value);
  // @@protoc_insertion_point(field_set:ReadItem.block_seq_num)
}

// uint64 trans_seq_num = 3;
inline void ReadItem::clear_trans_seq_num() {
  _impl_.trans_seq_num_ = uint64_t{0u};
}
inline uint64_t ReadItem::_internal_trans_seq_num() const {
  return _impl_.trans_seq_num_;
}
inline uint64_t ReadItem::trans_seq_num() const {
  // @@protoc_insertion_point(field_get:ReadItem.trans_seq_num)
  return _internal_trans_seq_num();
}
inline void ReadItem::_internal_set_trans_seq_num(uint64_t value) {
  
  _impl_.trans_seq_num_ = value;
}
inline void ReadItem::set_trans_seq_num(uint64_t value) {
  _internal_set_trans_seq_num(value);
  // @@protoc_insertion_point(field_set:ReadItem.trans_seq_num)
}

// -------------------------------------------------------------------

// WriteItem

// bytes write_key = 1;
inline void WriteItem::clear_write_key() {
  _impl_.write_key_.ClearToEmpty();
}
inline const std::string& WriteItem::write_key() const {
  // @@protoc_insertion_point(field_get:WriteItem.write_key)
  return _internal_write_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteItem::set_write_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.write_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WriteItem.write_key)
}
inline std::string* WriteItem::mutable_write_key() {
  std::string* _s = _internal_mutable_write_key();
  // @@protoc_insertion_point(field_mutable:WriteItem.write_key)
  return _s;
}
inline const std::string& WriteItem::_internal_write_key() const {
  return _impl_.write_key_.Get();
}
inline void WriteItem::_internal_set_write_key(const std::string& value) {
  
  _impl_.write_key_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteItem::_internal_mutable_write_key() {
  
  return _impl_.write_key_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteItem::release_write_key() {
  // @@protoc_insertion_point(field_release:WriteItem.write_key)
  return _impl_.write_key_.Release();
}
inline void WriteItem::set_allocated_write_key(std::string* write_key) {
  if (write_key != nullptr) {
    
  } else {
    
  }
  _impl_.write_key_.SetAllocated(write_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.write_key_.IsDefault()) {
    _impl_.write_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WriteItem.write_key)
}

// bytes write_value = 2;
inline void WriteItem::clear_write_value() {
  _impl_.write_value_.ClearToEmpty();
}
inline const std::string& WriteItem::write_value() const {
  // @@protoc_insertion_point(field_get:WriteItem.write_value)
  return _internal_write_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteItem::set_write_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.write_value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WriteItem.write_value)
}
inline std::string* WriteItem::mutable_write_value() {
  std::string* _s = _internal_mutable_write_value();
  // @@protoc_insertion_point(field_mutable:WriteItem.write_value)
  return _s;
}
inline const std::string& WriteItem::_internal_write_value() const {
  return _impl_.write_value_.Get();
}
inline void WriteItem::_internal_set_write_value(const std::string& value) {
  
  _impl_.write_value_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteItem::_internal_mutable_write_value() {
  
  return _impl_.write_value_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteItem::release_write_value() {
  // @@protoc_insertion_point(field_release:WriteItem.write_value)
  return _impl_.write_value_.Release();
}
inline void WriteItem::set_allocated_write_value(std::string* write_value) {
  if (write_value != nullptr) {
    
  } else {
    
  }
  _impl_.write_value_.SetAllocated(write_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.write_value_.IsDefault()) {
    _impl_.write_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WriteItem.write_value)
}

// -------------------------------------------------------------------

// OracleItem

// string keys = 1;
inline void OracleItem::clear_keys() {
  _impl_.keys_.ClearToEmpty();
}
inline const std::string& OracleItem::keys() const {
  // @@protoc_insertion_point(field_get:OracleItem.keys)
  return _internal_keys();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OracleItem::set_keys(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keys_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OracleItem.keys)
}
inline std::string* OracleItem::mutable_keys() {
  std::string* _s = _internal_mutable_keys();
  // @@protoc_insertion_point(field_mutable:OracleItem.keys)
  return _s;
}
inline const std::string& OracleItem::_internal_keys() const {
  return _impl_.keys_.Get();
}
inline void OracleItem::_internal_set_keys(const std::string& value) {
  
  _impl_.keys_.Set(value, GetArenaForAllocation());
}
inline std::string* OracleItem::_internal_mutable_keys() {
  
  return _impl_.keys_.Mutable(GetArenaForAllocation());
}
inline std::string* OracleItem::release_keys() {
  // @@protoc_insertion_point(field_release:OracleItem.keys)
  return _impl_.keys_.Release();
}
inline void OracleItem::set_allocated_keys(std::string* keys) {
  if (keys != nullptr) {
    
  } else {
    
  }
  _impl_.keys_.SetAllocated(keys, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keys_.IsDefault()) {
    _impl_.keys_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OracleItem.keys)
}

// bytes values = 2;
inline void OracleItem::clear_values() {
  _impl_.values_.ClearToEmpty();
}
inline const std::string& OracleItem::values() const {
  // @@protoc_insertion_point(field_get:OracleItem.values)
  return _internal_values();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OracleItem::set_values(ArgT0&& arg0, ArgT... args) {
 
 _impl_.values_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OracleItem.values)
}
inline std::string* OracleItem::mutable_values() {
  std::string* _s = _internal_mutable_values();
  // @@protoc_insertion_point(field_mutable:OracleItem.values)
  return _s;
}
inline const std::string& OracleItem::_internal_values() const {
  return _impl_.values_.Get();
}
inline void OracleItem::_internal_set_values(const std::string& value) {
  
  _impl_.values_.Set(value, GetArenaForAllocation());
}
inline std::string* OracleItem::_internal_mutable_values() {
  
  return _impl_.values_.Mutable(GetArenaForAllocation());
}
inline std::string* OracleItem::release_values() {
  // @@protoc_insertion_point(field_release:OracleItem.values)
  return _impl_.values_.Release();
}
inline void OracleItem::set_allocated_values(std::string* values) {
  if (values != nullptr) {
    
  } else {
    
  }
  _impl_.values_.SetAllocated(values, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.values_.IsDefault()) {
    _impl_.values_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OracleItem.values)
}

// -------------------------------------------------------------------

// Endorsement

// repeated .ReadItem read_set = 1;
inline int Endorsement::_internal_read_set_size() const {
  return _impl_.read_set_.size();
}
inline int Endorsement::read_set_size() const {
  return _internal_read_set_size();
}
inline void Endorsement::clear_read_set() {
  _impl_.read_set_.Clear();
}
inline ::ReadItem* Endorsement::mutable_read_set(int index) {
  // @@protoc_insertion_point(field_mutable:Endorsement.read_set)
  return _impl_.read_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadItem >*
Endorsement::mutable_read_set() {
  // @@protoc_insertion_point(field_mutable_list:Endorsement.read_set)
  return &_impl_.read_set_;
}
inline const ::ReadItem& Endorsement::_internal_read_set(int index) const {
  return _impl_.read_set_.Get(index);
}
inline const ::ReadItem& Endorsement::read_set(int index) const {
  // @@protoc_insertion_point(field_get:Endorsement.read_set)
  return _internal_read_set(index);
}
inline ::ReadItem* Endorsement::_internal_add_read_set() {
  return _impl_.read_set_.Add();
}
inline ::ReadItem* Endorsement::add_read_set() {
  ::ReadItem* _add = _internal_add_read_set();
  // @@protoc_insertion_point(field_add:Endorsement.read_set)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadItem >&
Endorsement::read_set() const {
  // @@protoc_insertion_point(field_list:Endorsement.read_set)
  return _impl_.read_set_;
}

// repeated .WriteItem write_set = 2;
inline int Endorsement::_internal_write_set_size() const {
  return _impl_.write_set_.size();
}
inline int Endorsement::write_set_size() const {
  return _internal_write_set_size();
}
inline void Endorsement::clear_write_set() {
  _impl_.write_set_.Clear();
}
inline ::WriteItem* Endorsement::mutable_write_set(int index) {
  // @@protoc_insertion_point(field_mutable:Endorsement.write_set)
  return _impl_.write_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteItem >*
Endorsement::mutable_write_set() {
  // @@protoc_insertion_point(field_mutable_list:Endorsement.write_set)
  return &_impl_.write_set_;
}
inline const ::WriteItem& Endorsement::_internal_write_set(int index) const {
  return _impl_.write_set_.Get(index);
}
inline const ::WriteItem& Endorsement::write_set(int index) const {
  // @@protoc_insertion_point(field_get:Endorsement.write_set)
  return _internal_write_set(index);
}
inline ::WriteItem* Endorsement::_internal_add_write_set() {
  return _impl_.write_set_.Add();
}
inline ::WriteItem* Endorsement::add_write_set() {
  ::WriteItem* _add = _internal_add_write_set();
  // @@protoc_insertion_point(field_add:Endorsement.write_set)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteItem >&
Endorsement::write_set() const {
  // @@protoc_insertion_point(field_list:Endorsement.write_set)
  return _impl_.write_set_;
}

// bytes transaction_id = 3;
inline void Endorsement::clear_transaction_id() {
  _impl_.transaction_id_.ClearToEmpty();
}
inline const std::string& Endorsement::transaction_id() const {
  // @@protoc_insertion_point(field_get:Endorsement.transaction_id)
  return _internal_transaction_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Endorsement::set_transaction_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transaction_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Endorsement.transaction_id)
}
inline std::string* Endorsement::mutable_transaction_id() {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:Endorsement.transaction_id)
  return _s;
}
inline const std::string& Endorsement::_internal_transaction_id() const {
  return _impl_.transaction_id_.Get();
}
inline void Endorsement::_internal_set_transaction_id(const std::string& value) {
  
  _impl_.transaction_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Endorsement::_internal_mutable_transaction_id() {
  
  return _impl_.transaction_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Endorsement::release_transaction_id() {
  // @@protoc_insertion_point(field_release:Endorsement.transaction_id)
  return _impl_.transaction_id_.Release();
}
inline void Endorsement::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  _impl_.transaction_id_.SetAllocated(transaction_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transaction_id_.IsDefault()) {
    _impl_.transaction_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Endorsement.transaction_id)
}

// uint64 endorser_id = 4;
inline void Endorsement::clear_endorser_id() {
  _impl_.endorser_id_ = uint64_t{0u};
}
inline uint64_t Endorsement::_internal_endorser_id() const {
  return _impl_.endorser_id_;
}
inline uint64_t Endorsement::endorser_id() const {
  // @@protoc_insertion_point(field_get:Endorsement.endorser_id)
  return _internal_endorser_id();
}
inline void Endorsement::_internal_set_endorser_id(uint64_t value) {
  
  _impl_.endorser_id_ = value;
}
inline void Endorsement::set_endorser_id(uint64_t value) {
  _internal_set_endorser_id(value);
  // @@protoc_insertion_point(field_set:Endorsement.endorser_id)
}

// bytes endorser_signature = 5;
inline void Endorsement::clear_endorser_signature() {
  _impl_.endorser_signature_.ClearToEmpty();
}
inline const std::string& Endorsement::endorser_signature() const {
  // @@protoc_insertion_point(field_get:Endorsement.endorser_signature)
  return _internal_endorser_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Endorsement::set_endorser_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.endorser_signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Endorsement.endorser_signature)
}
inline std::string* Endorsement::mutable_endorser_signature() {
  std::string* _s = _internal_mutable_endorser_signature();
  // @@protoc_insertion_point(field_mutable:Endorsement.endorser_signature)
  return _s;
}
inline const std::string& Endorsement::_internal_endorser_signature() const {
  return _impl_.endorser_signature_.Get();
}
inline void Endorsement::_internal_set_endorser_signature(const std::string& value) {
  
  _impl_.endorser_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Endorsement::_internal_mutable_endorser_signature() {
  
  return _impl_.endorser_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* Endorsement::release_endorser_signature() {
  // @@protoc_insertion_point(field_release:Endorsement.endorser_signature)
  return _impl_.endorser_signature_.Release();
}
inline void Endorsement::set_allocated_endorser_signature(std::string* endorser_signature) {
  if (endorser_signature != nullptr) {
    
  } else {
    
  }
  _impl_.endorser_signature_.SetAllocated(endorser_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.endorser_signature_.IsDefault()) {
    _impl_.endorser_signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Endorsement.endorser_signature)
}

// bool aborted = 6;
inline void Endorsement::clear_aborted() {
  _impl_.aborted_ = false;
}
inline bool Endorsement::_internal_aborted() const {
  return _impl_.aborted_;
}
inline bool Endorsement::aborted() const {
  // @@protoc_insertion_point(field_get:Endorsement.aborted)
  return _internal_aborted();
}
inline void Endorsement::_internal_set_aborted(bool value) {
  
  _impl_.aborted_ = value;
}
inline void Endorsement::set_aborted(bool value) {
  _internal_set_aborted(value);
  // @@protoc_insertion_point(field_set:Endorsement.aborted)
}

// .google.protobuf.Timestamp received_ts = 7;
inline bool Endorsement::_internal_has_received_ts() const {
  return this != internal_default_instance() && _impl_.received_ts_ != nullptr;
}
inline bool Endorsement::has_received_ts() const {
  return _internal_has_received_ts();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Endorsement::_internal_received_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.received_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Endorsement::received_ts() const {
  // @@protoc_insertion_point(field_get:Endorsement.received_ts)
  return _internal_received_ts();
}
inline void Endorsement::unsafe_arena_set_allocated_received_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.received_ts_);
  }
  _impl_.received_ts_ = received_ts;
  if (received_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Endorsement.received_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::release_received_ts() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.received_ts_;
  _impl_.received_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::unsafe_arena_release_received_ts() {
  // @@protoc_insertion_point(field_release:Endorsement.received_ts)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.received_ts_;
  _impl_.received_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::_internal_mutable_received_ts() {
  
  if (_impl_.received_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.received_ts_ = p;
  }
  return _impl_.received_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::mutable_received_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_received_ts();
  // @@protoc_insertion_point(field_mutable:Endorsement.received_ts)
  return _msg;
}
inline void Endorsement::set_allocated_received_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.received_ts_);
  }
  if (received_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(received_ts));
    if (message_arena != submessage_arena) {
      received_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received_ts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.received_ts_ = received_ts;
  // @@protoc_insertion_point(field_set_allocated:Endorsement.received_ts)
}

// .google.protobuf.Timestamp execution_start_ts = 8;
inline bool Endorsement::_internal_has_execution_start_ts() const {
  return this != internal_default_instance() && _impl_.execution_start_ts_ != nullptr;
}
inline bool Endorsement::has_execution_start_ts() const {
  return _internal_has_execution_start_ts();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Endorsement::_internal_execution_start_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.execution_start_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Endorsement::execution_start_ts() const {
  // @@protoc_insertion_point(field_get:Endorsement.execution_start_ts)
  return _internal_execution_start_ts();
}
inline void Endorsement::unsafe_arena_set_allocated_execution_start_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.execution_start_ts_);
  }
  _impl_.execution_start_ts_ = execution_start_ts;
  if (execution_start_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Endorsement.execution_start_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::release_execution_start_ts() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.execution_start_ts_;
  _impl_.execution_start_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::unsafe_arena_release_execution_start_ts() {
  // @@protoc_insertion_point(field_release:Endorsement.execution_start_ts)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.execution_start_ts_;
  _impl_.execution_start_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::_internal_mutable_execution_start_ts() {
  
  if (_impl_.execution_start_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.execution_start_ts_ = p;
  }
  return _impl_.execution_start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::mutable_execution_start_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_execution_start_ts();
  // @@protoc_insertion_point(field_mutable:Endorsement.execution_start_ts)
  return _msg;
}
inline void Endorsement::set_allocated_execution_start_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.execution_start_ts_);
  }
  if (execution_start_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_start_ts));
    if (message_arena != submessage_arena) {
      execution_start_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_start_ts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.execution_start_ts_ = execution_start_ts;
  // @@protoc_insertion_point(field_set_allocated:Endorsement.execution_start_ts)
}

// .google.protobuf.Timestamp execution_end_ts = 9;
inline bool Endorsement::_internal_has_execution_end_ts() const {
  return this != internal_default_instance() && _impl_.execution_end_ts_ != nullptr;
}
inline bool Endorsement::has_execution_end_ts() const {
  return _internal_has_execution_end_ts();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Endorsement::_internal_execution_end_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.execution_end_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Endorsement::execution_end_ts() const {
  // @@protoc_insertion_point(field_get:Endorsement.execution_end_ts)
  return _internal_execution_end_ts();
}
inline void Endorsement::unsafe_arena_set_allocated_execution_end_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* execution_end_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.execution_end_ts_);
  }
  _impl_.execution_end_ts_ = execution_end_ts;
  if (execution_end_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Endorsement.execution_end_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::release_execution_end_ts() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.execution_end_ts_;
  _impl_.execution_end_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::unsafe_arena_release_execution_end_ts() {
  // @@protoc_insertion_point(field_release:Endorsement.execution_end_ts)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.execution_end_ts_;
  _impl_.execution_end_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::_internal_mutable_execution_end_ts() {
  
  if (_impl_.execution_end_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.execution_end_ts_ = p;
  }
  return _impl_.execution_end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Endorsement::mutable_execution_end_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_execution_end_ts();
  // @@protoc_insertion_point(field_mutable:Endorsement.execution_end_ts)
  return _msg;
}
inline void Endorsement::set_allocated_execution_end_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* execution_end_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.execution_end_ts_);
  }
  if (execution_end_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_end_ts));
    if (message_arena != submessage_arena) {
      execution_end_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_end_ts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.execution_end_ts_ = execution_end_ts;
  // @@protoc_insertion_point(field_set_allocated:Endorsement.execution_end_ts)
}

// repeated .OracleItem oracle_set = 10;
inline int Endorsement::_internal_oracle_set_size() const {
  return _impl_.oracle_set_.size();
}
inline int Endorsement::oracle_set_size() const {
  return _internal_oracle_set_size();
}
inline void Endorsement::clear_oracle_set() {
  _impl_.oracle_set_.Clear();
}
inline ::OracleItem* Endorsement::mutable_oracle_set(int index) {
  // @@protoc_insertion_point(field_mutable:Endorsement.oracle_set)
  return _impl_.oracle_set_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OracleItem >*
Endorsement::mutable_oracle_set() {
  // @@protoc_insertion_point(field_mutable_list:Endorsement.oracle_set)
  return &_impl_.oracle_set_;
}
inline const ::OracleItem& Endorsement::_internal_oracle_set(int index) const {
  return _impl_.oracle_set_.Get(index);
}
inline const ::OracleItem& Endorsement::oracle_set(int index) const {
  // @@protoc_insertion_point(field_get:Endorsement.oracle_set)
  return _internal_oracle_set(index);
}
inline ::OracleItem* Endorsement::_internal_add_oracle_set() {
  return _impl_.oracle_set_.Add();
}
inline ::OracleItem* Endorsement::add_oracle_set() {
  ::OracleItem* _add = _internal_add_oracle_set();
  // @@protoc_insertion_point(field_add:Endorsement.oracle_set)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OracleItem >&
Endorsement::oracle_set() const {
  // @@protoc_insertion_point(field_list:Endorsement.oracle_set)
  return _impl_.oracle_set_;
}

// -------------------------------------------------------------------

// TransactionProposal

// .TransactionProposal.Type type = 1;
inline void TransactionProposal::clear_type() {
  _impl_.type_ = 0;
}
inline ::TransactionProposal_Type TransactionProposal::_internal_type() const {
  return static_cast< ::TransactionProposal_Type >(_impl_.type_);
}
inline ::TransactionProposal_Type TransactionProposal::type() const {
  // @@protoc_insertion_point(field_get:TransactionProposal.type)
  return _internal_type();
}
inline void TransactionProposal::_internal_set_type(::TransactionProposal_Type value) {
  
  _impl_.type_ = value;
}
inline void TransactionProposal::set_type(::TransactionProposal_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TransactionProposal.type)
}

// repeated string keys = 2;
inline int TransactionProposal::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int TransactionProposal::keys_size() const {
  return _internal_keys_size();
}
inline void TransactionProposal::clear_keys() {
  _impl_.keys_.Clear();
}
inline std::string* TransactionProposal::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:TransactionProposal.keys)
  return _s;
}
inline const std::string& TransactionProposal::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const std::string& TransactionProposal::keys(int index) const {
  // @@protoc_insertion_point(field_get:TransactionProposal.keys)
  return _internal_keys(index);
}
inline std::string* TransactionProposal::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TransactionProposal.keys)
  return _impl_.keys_.Mutable(index);
}
inline void TransactionProposal::set_keys(int index, const std::string& value) {
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TransactionProposal.keys)
}
inline void TransactionProposal::set_keys(int index, std::string&& value) {
  _impl_.keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TransactionProposal.keys)
}
inline void TransactionProposal::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TransactionProposal.keys)
}
inline void TransactionProposal::set_keys(int index, const char* value, size_t size) {
  _impl_.keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TransactionProposal.keys)
}
inline std::string* TransactionProposal::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline void TransactionProposal::add_keys(const std::string& value) {
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TransactionProposal.keys)
}
inline void TransactionProposal::add_keys(std::string&& value) {
  _impl_.keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TransactionProposal.keys)
}
inline void TransactionProposal::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TransactionProposal.keys)
}
inline void TransactionProposal::add_keys(const char* value, size_t size) {
  _impl_.keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TransactionProposal.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionProposal::keys() const {
  // @@protoc_insertion_point(field_list:TransactionProposal.keys)
  return _impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionProposal::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:TransactionProposal.keys)
  return &_impl_.keys_;
}

// repeated bytes values = 3;
inline int TransactionProposal::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int TransactionProposal::values_size() const {
  return _internal_values_size();
}
inline void TransactionProposal::clear_values() {
  _impl_.values_.Clear();
}
inline std::string* TransactionProposal::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:TransactionProposal.values)
  return _s;
}
inline const std::string& TransactionProposal::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const std::string& TransactionProposal::values(int index) const {
  // @@protoc_insertion_point(field_get:TransactionProposal.values)
  return _internal_values(index);
}
inline std::string* TransactionProposal::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:TransactionProposal.values)
  return _impl_.values_.Mutable(index);
}
inline void TransactionProposal::set_values(int index, const std::string& value) {
  _impl_.values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TransactionProposal.values)
}
inline void TransactionProposal::set_values(int index, std::string&& value) {
  _impl_.values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TransactionProposal.values)
}
inline void TransactionProposal::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TransactionProposal.values)
}
inline void TransactionProposal::set_values(int index, const void* value, size_t size) {
  _impl_.values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TransactionProposal.values)
}
inline std::string* TransactionProposal::_internal_add_values() {
  return _impl_.values_.Add();
}
inline void TransactionProposal::add_values(const std::string& value) {
  _impl_.values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TransactionProposal.values)
}
inline void TransactionProposal::add_values(std::string&& value) {
  _impl_.values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TransactionProposal.values)
}
inline void TransactionProposal::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TransactionProposal.values)
}
inline void TransactionProposal::add_values(const void* value, size_t size) {
  _impl_.values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TransactionProposal.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionProposal::values() const {
  // @@protoc_insertion_point(field_list:TransactionProposal.values)
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionProposal::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:TransactionProposal.values)
  return &_impl_.values_;
}

// uint64 execution_delay = 4;
inline void TransactionProposal::clear_execution_delay() {
  _impl_.execution_delay_ = uint64_t{0u};
}
inline uint64_t TransactionProposal::_internal_execution_delay() const {
  return _impl_.execution_delay_;
}
inline uint64_t TransactionProposal::execution_delay() const {
  // @@protoc_insertion_point(field_get:TransactionProposal.execution_delay)
  return _internal_execution_delay();
}
inline void TransactionProposal::_internal_set_execution_delay(uint64_t value) {
  
  _impl_.execution_delay_ = value;
}
inline void TransactionProposal::set_execution_delay(uint64_t value) {
  _internal_set_execution_delay(value);
  // @@protoc_insertion_point(field_set:TransactionProposal.execution_delay)
}

// .google.protobuf.Timestamp received_ts = 5;
inline bool TransactionProposal::_internal_has_received_ts() const {
  return this != internal_default_instance() && _impl_.received_ts_ != nullptr;
}
inline bool TransactionProposal::has_received_ts() const {
  return _internal_has_received_ts();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransactionProposal::_internal_received_ts() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.received_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TransactionProposal::received_ts() const {
  // @@protoc_insertion_point(field_get:TransactionProposal.received_ts)
  return _internal_received_ts();
}
inline void TransactionProposal::unsafe_arena_set_allocated_received_ts(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.received_ts_);
  }
  _impl_.received_ts_ = received_ts;
  if (received_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransactionProposal.received_ts)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionProposal::release_received_ts() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.received_ts_;
  _impl_.received_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionProposal::unsafe_arena_release_received_ts() {
  // @@protoc_insertion_point(field_release:TransactionProposal.received_ts)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.received_ts_;
  _impl_.received_ts_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionProposal::_internal_mutable_received_ts() {
  
  if (_impl_.received_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.received_ts_ = p;
  }
  return _impl_.received_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TransactionProposal::mutable_received_ts() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_received_ts();
  // @@protoc_insertion_point(field_mutable:TransactionProposal.received_ts)
  return _msg;
}
inline void TransactionProposal::set_allocated_received_ts(::PROTOBUF_NAMESPACE_ID::Timestamp* received_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.received_ts_);
  }
  if (received_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(received_ts));
    if (message_arena != submessage_arena) {
      received_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received_ts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.received_ts_ = received_ts;
  // @@protoc_insertion_point(field_set_allocated:TransactionProposal.received_ts)
}

// uint64 id = 6;
inline void TransactionProposal::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t TransactionProposal::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t TransactionProposal::id() const {
  // @@protoc_insertion_point(field_get:TransactionProposal.id)
  return _internal_id();
}
inline void TransactionProposal::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void TransactionProposal::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TransactionProposal.id)
}

// -------------------------------------------------------------------

// Request

// .Endorsement endorsement = 1;
inline bool Request::_internal_has_endorsement() const {
  return this != internal_default_instance() && _impl_.endorsement_ != nullptr;
}
inline bool Request::has_endorsement() const {
  return _internal_has_endorsement();
}
inline void Request::clear_endorsement() {
  if (GetArenaForAllocation() == nullptr && _impl_.endorsement_ != nullptr) {
    delete _impl_.endorsement_;
  }
  _impl_.endorsement_ = nullptr;
}
inline const ::Endorsement& Request::_internal_endorsement() const {
  const ::Endorsement* p = _impl_.endorsement_;
  return p != nullptr ? *p : reinterpret_cast<const ::Endorsement&>(
      ::_Endorsement_default_instance_);
}
inline const ::Endorsement& Request::endorsement() const {
  // @@protoc_insertion_point(field_get:Request.endorsement)
  return _internal_endorsement();
}
inline void Request::unsafe_arena_set_allocated_endorsement(
    ::Endorsement* endorsement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endorsement_);
  }
  _impl_.endorsement_ = endorsement;
  if (endorsement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.endorsement)
}
inline ::Endorsement* Request::release_endorsement() {
  
  ::Endorsement* temp = _impl_.endorsement_;
  _impl_.endorsement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Endorsement* Request::unsafe_arena_release_endorsement() {
  // @@protoc_insertion_point(field_release:Request.endorsement)
  
  ::Endorsement* temp = _impl_.endorsement_;
  _impl_.endorsement_ = nullptr;
  return temp;
}
inline ::Endorsement* Request::_internal_mutable_endorsement() {
  
  if (_impl_.endorsement_ == nullptr) {
    auto* p = CreateMaybeMessage<::Endorsement>(GetArenaForAllocation());
    _impl_.endorsement_ = p;
  }
  return _impl_.endorsement_;
}
inline ::Endorsement* Request::mutable_endorsement() {
  ::Endorsement* _msg = _internal_mutable_endorsement();
  // @@protoc_insertion_point(field_mutable:Request.endorsement)
  return _msg;
}
inline void Request::set_allocated_endorsement(::Endorsement* endorsement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.endorsement_;
  }
  if (endorsement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(endorsement);
    if (message_arena != submessage_arena) {
      endorsement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endorsement, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.endorsement_ = endorsement;
  // @@protoc_insertion_point(field_set_allocated:Request.endorsement)
}

// .TransactionProposal proposal = 2;
inline bool Request::_internal_has_proposal() const {
  return this != internal_default_instance() && _impl_.proposal_ != nullptr;
}
inline bool Request::has_proposal() const {
  return _internal_has_proposal();
}
inline void Request::clear_proposal() {
  if (GetArenaForAllocation() == nullptr && _impl_.proposal_ != nullptr) {
    delete _impl_.proposal_;
  }
  _impl_.proposal_ = nullptr;
}
inline const ::TransactionProposal& Request::_internal_proposal() const {
  const ::TransactionProposal* p = _impl_.proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransactionProposal&>(
      ::_TransactionProposal_default_instance_);
}
inline const ::TransactionProposal& Request::proposal() const {
  // @@protoc_insertion_point(field_get:Request.proposal)
  return _internal_proposal();
}
inline void Request::unsafe_arena_set_allocated_proposal(
    ::TransactionProposal* proposal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proposal_);
  }
  _impl_.proposal_ = proposal;
  if (proposal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Request.proposal)
}
inline ::TransactionProposal* Request::release_proposal() {
  
  ::TransactionProposal* temp = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransactionProposal* Request::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:Request.proposal)
  
  ::TransactionProposal* temp = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
  return temp;
}
inline ::TransactionProposal* Request::_internal_mutable_proposal() {
  
  if (_impl_.proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransactionProposal>(GetArenaForAllocation());
    _impl_.proposal_ = p;
  }
  return _impl_.proposal_;
}
inline ::TransactionProposal* Request::mutable_proposal() {
  ::TransactionProposal* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:Request.proposal)
  return _msg;
}
inline void Request::set_allocated_proposal(::TransactionProposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.proposal_;
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proposal);
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:Request.proposal)
}

// -------------------------------------------------------------------

// Block

// repeated .Endorsement transactions = 1;
inline int Block::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int Block::transactions_size() const {
  return _internal_transactions_size();
}
inline void Block::clear_transactions() {
  _impl_.transactions_.Clear();
}
inline ::Endorsement* Block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:Block.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endorsement >*
Block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:Block.transactions)
  return &_impl_.transactions_;
}
inline const ::Endorsement& Block::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::Endorsement& Block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:Block.transactions)
  return _internal_transactions(index);
}
inline ::Endorsement* Block::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::Endorsement* Block::add_transactions() {
  ::Endorsement* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:Block.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Endorsement >&
Block::transactions() const {
  // @@protoc_insertion_point(field_list:Block.transactions)
  return _impl_.transactions_;
}

// uint64 block_id = 2;
inline void Block::clear_block_id() {
  _impl_.block_id_ = uint64_t{0u};
}
inline uint64_t Block::_internal_block_id() const {
  return _impl_.block_id_;
}
inline uint64_t Block::block_id() const {
  // @@protoc_insertion_point(field_get:Block.block_id)
  return _internal_block_id();
}
inline void Block::_internal_set_block_id(uint64_t value) {
  
  _impl_.block_id_ = value;
}
inline void Block::set_block_id(uint64_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:Block.block_id)
}

// string prev_block_hash = 3;
inline void Block::clear_prev_block_hash() {
  _impl_.prev_block_hash_.ClearToEmpty();
}
inline const std::string& Block::prev_block_hash() const {
  // @@protoc_insertion_point(field_get:Block.prev_block_hash)
  return _internal_prev_block_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_prev_block_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prev_block_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Block.prev_block_hash)
}
inline std::string* Block::mutable_prev_block_hash() {
  std::string* _s = _internal_mutable_prev_block_hash();
  // @@protoc_insertion_point(field_mutable:Block.prev_block_hash)
  return _s;
}
inline const std::string& Block::_internal_prev_block_hash() const {
  return _impl_.prev_block_hash_.Get();
}
inline void Block::_internal_set_prev_block_hash(const std::string& value) {
  
  _impl_.prev_block_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_prev_block_hash() {
  
  return _impl_.prev_block_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_prev_block_hash() {
  // @@protoc_insertion_point(field_release:Block.prev_block_hash)
  return _impl_.prev_block_hash_.Release();
}
inline void Block::set_allocated_prev_block_hash(std::string* prev_block_hash) {
  if (prev_block_hash != nullptr) {
    
  } else {
    
  }
  _impl_.prev_block_hash_.SetAllocated(prev_block_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_block_hash_.IsDefault()) {
    _impl_.prev_block_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Block.prev_block_hash)
}

// -------------------------------------------------------------------

// Action

// uint64 blocksize = 1;
inline void Action::clear_blocksize() {
  _impl_.blocksize_ = uint64_t{0u};
}
inline uint64_t Action::_internal_blocksize() const {
  return _impl_.blocksize_;
}
inline uint64_t Action::blocksize() const {
  // @@protoc_insertion_point(field_get:Action.blocksize)
  return _internal_blocksize();
}
inline void Action::_internal_set_blocksize(uint64_t value) {
  
  _impl_.blocksize_ = value;
}
inline void Action::set_blocksize(uint64_t value) {
  _internal_set_blocksize(value);
  // @@protoc_insertion_point(field_set:Action.blocksize)
}

// bool early_execution = 2;
inline void Action::clear_early_execution() {
  _impl_.early_execution_ = false;
}
inline bool Action::_internal_early_execution() const {
  return _impl_.early_execution_;
}
inline bool Action::early_execution() const {
  // @@protoc_insertion_point(field_get:Action.early_execution)
  return _internal_early_execution();
}
inline void Action::_internal_set_early_execution(bool value) {
  
  _impl_.early_execution_ = value;
}
inline void Action::set_early_execution(bool value) {
  _internal_set_early_execution(value);
  // @@protoc_insertion_point(field_set:Action.early_execution)
}

// bool reorder = 3;
inline void Action::clear_reorder() {
  _impl_.reorder_ = false;
}
inline bool Action::_internal_reorder() const {
  return _impl_.reorder_;
}
inline bool Action::reorder() const {
  // @@protoc_insertion_point(field_get:Action.reorder)
  return _internal_reorder();
}
inline void Action::_internal_set_reorder(bool value) {
  
  _impl_.reorder_ = value;
}
inline void Action::set_reorder(bool value) {
  _internal_set_reorder(value);
  // @@protoc_insertion_point(field_set:Action.reorder)
}

// -------------------------------------------------------------------

// WatermarkLow

// double throughput = 1;
inline void WatermarkLow::clear_throughput() {
  _impl_.throughput_ = 0;
}
inline double WatermarkLow::_internal_throughput() const {
  return _impl_.throughput_;
}
inline double WatermarkLow::throughput() const {
  // @@protoc_insertion_point(field_get:WatermarkLow.throughput)
  return _internal_throughput();
}
inline void WatermarkLow::_internal_set_throughput(double value) {
  
  _impl_.throughput_ = value;
}
inline void WatermarkLow::set_throughput(double value) {
  _internal_set_throughput(value);
  // @@protoc_insertion_point(field_set:WatermarkLow.throughput)
}

// uint64 block_id_start = 2;
inline void WatermarkLow::clear_block_id_start() {
  _impl_.block_id_start_ = uint64_t{0u};
}
inline uint64_t WatermarkLow::_internal_block_id_start() const {
  return _impl_.block_id_start_;
}
inline uint64_t WatermarkLow::block_id_start() const {
  // @@protoc_insertion_point(field_get:WatermarkLow.block_id_start)
  return _internal_block_id_start();
}
inline void WatermarkLow::_internal_set_block_id_start(uint64_t value) {
  
  _impl_.block_id_start_ = value;
}
inline void WatermarkLow::set_block_id_start(uint64_t value) {
  _internal_set_block_id_start(value);
  // @@protoc_insertion_point(field_set:WatermarkLow.block_id_start)
}

// uint64 block_id_now = 3;
inline void WatermarkLow::clear_block_id_now() {
  _impl_.block_id_now_ = uint64_t{0u};
}
inline uint64_t WatermarkLow::_internal_block_id_now() const {
  return _impl_.block_id_now_;
}
inline uint64_t WatermarkLow::block_id_now() const {
  // @@protoc_insertion_point(field_get:WatermarkLow.block_id_now)
  return _internal_block_id_now();
}
inline void WatermarkLow::_internal_set_block_id_now(uint64_t value) {
  
  _impl_.block_id_now_ = value;
}
inline void WatermarkLow::set_block_id_now(uint64_t value) {
  _internal_set_block_id_now(value);
  // @@protoc_insertion_point(field_set:WatermarkLow.block_id_now)
}

// -------------------------------------------------------------------

// AgentExchange

// string originator = 1;
inline void AgentExchange::clear_originator() {
  _impl_.originator_.ClearToEmpty();
}
inline const std::string& AgentExchange::originator() const {
  // @@protoc_insertion_point(field_get:AgentExchange.originator)
  return _internal_originator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentExchange::set_originator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.originator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AgentExchange.originator)
}
inline std::string* AgentExchange::mutable_originator() {
  std::string* _s = _internal_mutable_originator();
  // @@protoc_insertion_point(field_mutable:AgentExchange.originator)
  return _s;
}
inline const std::string& AgentExchange::_internal_originator() const {
  return _impl_.originator_.Get();
}
inline void AgentExchange::_internal_set_originator(const std::string& value) {
  
  _impl_.originator_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentExchange::_internal_mutable_originator() {
  
  return _impl_.originator_.Mutable(GetArenaForAllocation());
}
inline std::string* AgentExchange::release_originator() {
  // @@protoc_insertion_point(field_release:AgentExchange.originator)
  return _impl_.originator_.Release();
}
inline void AgentExchange::set_allocated_originator(std::string* originator) {
  if (originator != nullptr) {
    
  } else {
    
  }
  _impl_.originator_.SetAllocated(originator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.originator_.IsDefault()) {
    _impl_.originator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AgentExchange.originator)
}

// double write_ratio = 2;
inline void AgentExchange::clear_write_ratio() {
  _impl_.write_ratio_ = 0;
}
inline double AgentExchange::_internal_write_ratio() const {
  return _impl_.write_ratio_;
}
inline double AgentExchange::write_ratio() const {
  // @@protoc_insertion_point(field_get:AgentExchange.write_ratio)
  return _internal_write_ratio();
}
inline void AgentExchange::_internal_set_write_ratio(double value) {
  
  _impl_.write_ratio_ = value;
}
inline void AgentExchange::set_write_ratio(double value) {
  _internal_set_write_ratio(value);
  // @@protoc_insertion_point(field_set:AgentExchange.write_ratio)
}

// double hot_key_ratio = 3;
inline void AgentExchange::clear_hot_key_ratio() {
  _impl_.hot_key_ratio_ = 0;
}
inline double AgentExchange::_internal_hot_key_ratio() const {
  return _impl_.hot_key_ratio_;
}
inline double AgentExchange::hot_key_ratio() const {
  // @@protoc_insertion_point(field_get:AgentExchange.hot_key_ratio)
  return _internal_hot_key_ratio();
}
inline void AgentExchange::_internal_set_hot_key_ratio(double value) {
  
  _impl_.hot_key_ratio_ = value;
}
inline void AgentExchange::set_hot_key_ratio(double value) {
  _internal_set_hot_key_ratio(value);
  // @@protoc_insertion_point(field_set:AgentExchange.hot_key_ratio)
}

// double trans_arrival_rate = 4;
inline void AgentExchange::clear_trans_arrival_rate() {
  _impl_.trans_arrival_rate_ = 0;
}
inline double AgentExchange::_internal_trans_arrival_rate() const {
  return _impl_.trans_arrival_rate_;
}
inline double AgentExchange::trans_arrival_rate() const {
  // @@protoc_insertion_point(field_get:AgentExchange.trans_arrival_rate)
  return _internal_trans_arrival_rate();
}
inline void AgentExchange::_internal_set_trans_arrival_rate(double value) {
  
  _impl_.trans_arrival_rate_ = value;
}
inline void AgentExchange::set_trans_arrival_rate(double value) {
  _internal_set_trans_arrival_rate(value);
  // @@protoc_insertion_point(field_set:AgentExchange.trans_arrival_rate)
}

// double execution_delay = 5;
inline void AgentExchange::clear_execution_delay() {
  _impl_.execution_delay_ = 0;
}
inline double AgentExchange::_internal_execution_delay() const {
  return _impl_.execution_delay_;
}
inline double AgentExchange::execution_delay() const {
  // @@protoc_insertion_point(field_get:AgentExchange.execution_delay)
  return _internal_execution_delay();
}
inline void AgentExchange::_internal_set_execution_delay(double value) {
  
  _impl_.execution_delay_ = value;
}
inline void AgentExchange::set_execution_delay(double value) {
  _internal_set_execution_delay(value);
  // @@protoc_insertion_point(field_set:AgentExchange.execution_delay)
}

// double throughput = 6;
inline void AgentExchange::clear_throughput() {
  _impl_.throughput_ = 0;
}
inline double AgentExchange::_internal_throughput() const {
  return _impl_.throughput_;
}
inline double AgentExchange::throughput() const {
  // @@protoc_insertion_point(field_get:AgentExchange.throughput)
  return _internal_throughput();
}
inline void AgentExchange::_internal_set_throughput(double value) {
  
  _impl_.throughput_ = value;
}
inline void AgentExchange::set_throughput(double value) {
  _internal_set_throughput(value);
  // @@protoc_insertion_point(field_set:AgentExchange.throughput)
}

// -------------------------------------------------------------------

// PeerExchange

// uint64 block_index = 1;
inline void PeerExchange::clear_block_index() {
  _impl_.block_index_ = uint64_t{0u};
}
inline uint64_t PeerExchange::_internal_block_index() const {
  return _impl_.block_index_;
}
inline uint64_t PeerExchange::block_index() const {
  // @@protoc_insertion_point(field_get:PeerExchange.block_index)
  return _internal_block_index();
}
inline void PeerExchange::_internal_set_block_index(uint64_t value) {
  
  _impl_.block_index_ = value;
}
inline void PeerExchange::set_block_index(uint64_t value) {
  _internal_set_block_index(value);
  // @@protoc_insertion_point(field_set:PeerExchange.block_index)
}

// uint64 raft_index = 2;
inline void PeerExchange::clear_raft_index() {
  _impl_.raft_index_ = uint64_t{0u};
}
inline uint64_t PeerExchange::_internal_raft_index() const {
  return _impl_.raft_index_;
}
inline uint64_t PeerExchange::raft_index() const {
  // @@protoc_insertion_point(field_get:PeerExchange.raft_index)
  return _internal_raft_index();
}
inline void PeerExchange::_internal_set_raft_index(uint64_t value) {
  
  _impl_.raft_index_ = value;
}
inline void PeerExchange::set_raft_index(uint64_t value) {
  _internal_set_raft_index(value);
  // @@protoc_insertion_point(field_set:PeerExchange.raft_index)
}

// bool no_progress = 3;
inline void PeerExchange::clear_no_progress() {
  _impl_.no_progress_ = false;
}
inline bool PeerExchange::_internal_no_progress() const {
  return _impl_.no_progress_;
}
inline bool PeerExchange::no_progress() const {
  // @@protoc_insertion_point(field_get:PeerExchange.no_progress)
  return _internal_no_progress();
}
inline void PeerExchange::_internal_set_no_progress(bool value) {
  
  _impl_.no_progress_ = value;
}
inline void PeerExchange::set_no_progress(bool value) {
  _internal_set_no_progress(value);
  // @@protoc_insertion_point(field_set:PeerExchange.no_progress)
}

// -------------------------------------------------------------------

// TaggedEntry

// uint64 tag = 1;
inline void TaggedEntry::clear_tag() {
  _impl_.tag_ = uint64_t{0u};
}
inline uint64_t TaggedEntry::_internal_tag() const {
  return _impl_.tag_;
}
inline uint64_t TaggedEntry::tag() const {
  // @@protoc_insertion_point(field_get:TaggedEntry.tag)
  return _internal_tag();
}
inline void TaggedEntry::_internal_set_tag(uint64_t value) {
  
  _impl_.tag_ = value;
}
inline void TaggedEntry::set_tag(uint64_t value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:TaggedEntry.tag)
}

// bytes entry = 2;
inline void TaggedEntry::clear_entry() {
  _impl_.entry_.ClearToEmpty();
}
inline const std::string& TaggedEntry::entry() const {
  // @@protoc_insertion_point(field_get:TaggedEntry.entry)
  return _internal_entry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaggedEntry::set_entry(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entry_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TaggedEntry.entry)
}
inline std::string* TaggedEntry::mutable_entry() {
  std::string* _s = _internal_mutable_entry();
  // @@protoc_insertion_point(field_mutable:TaggedEntry.entry)
  return _s;
}
inline const std::string& TaggedEntry::_internal_entry() const {
  return _impl_.entry_.Get();
}
inline void TaggedEntry::_internal_set_entry(const std::string& value) {
  
  _impl_.entry_.Set(value, GetArenaForAllocation());
}
inline std::string* TaggedEntry::_internal_mutable_entry() {
  
  return _impl_.entry_.Mutable(GetArenaForAllocation());
}
inline std::string* TaggedEntry::release_entry() {
  // @@protoc_insertion_point(field_release:TaggedEntry.entry)
  return _impl_.entry_.Release();
}
inline void TaggedEntry::set_allocated_entry(std::string* entry) {
  if (entry != nullptr) {
    
  } else {
    
  }
  _impl_.entry_.SetAllocated(entry, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entry_.IsDefault()) {
    _impl_.entry_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TaggedEntry.entry)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TransactionProposal_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TransactionProposal_Type>() {
  return ::TransactionProposal_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockchain_2eproto
