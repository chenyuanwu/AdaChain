// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blockchain.proto

#include "blockchain.pb.h"
#include "blockchain.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* PeerComm_method_names[] = {
  "/PeerComm/append_entries",
  "/PeerComm/send_to_peer",
  "/PeerComm/send_to_peer_stream",
  "/PeerComm/prepopulate",
  "/PeerComm/start_benchmarking",
  "/PeerComm/end_benchmarking",
};

std::unique_ptr< PeerComm::Stub> PeerComm::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PeerComm::Stub> stub(new PeerComm::Stub(channel, options));
  return stub;
}

PeerComm::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_append_entries_(PeerComm_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_send_to_peer_(PeerComm_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_send_to_peer_stream_(PeerComm_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_prepopulate_(PeerComm_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_benchmarking_(PeerComm_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_end_benchmarking_(PeerComm_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PeerComm::Stub::append_entries(::grpc::ClientContext* context, const ::AppendRequest& request, ::AppendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AppendRequest, ::AppendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_append_entries_, context, request, response);
}

void PeerComm::Stub::async::append_entries(::grpc::ClientContext* context, const ::AppendRequest* request, ::AppendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AppendRequest, ::AppendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_append_entries_, context, request, response, std::move(f));
}

void PeerComm::Stub::async::append_entries(::grpc::ClientContext* context, const ::AppendRequest* request, ::AppendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_append_entries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AppendResponse>* PeerComm::Stub::PrepareAsyncappend_entriesRaw(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AppendResponse, ::AppendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_append_entries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AppendResponse>* PeerComm::Stub::Asyncappend_entriesRaw(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncappend_entriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PeerComm::Stub::send_to_peer(::grpc::ClientContext* context, const ::Request& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_send_to_peer_, context, request, response);
}

void PeerComm::Stub::async::send_to_peer(::grpc::ClientContext* context, const ::Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_to_peer_, context, request, response, std::move(f));
}

void PeerComm::Stub::async::send_to_peer(::grpc::ClientContext* context, const ::Request* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_to_peer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PeerComm::Stub::PrepareAsyncsend_to_peerRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_send_to_peer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PeerComm::Stub::Asyncsend_to_peerRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsend_to_peerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::Request>* PeerComm::Stub::send_to_peer_streamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::Request>::Create(channel_.get(), rpcmethod_send_to_peer_stream_, context, response);
}

void PeerComm::Stub::async::send_to_peer_stream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::Request>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::Request>::Create(stub_->channel_.get(), stub_->rpcmethod_send_to_peer_stream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::Request>* PeerComm::Stub::Asyncsend_to_peer_streamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Request>::Create(channel_.get(), cq, rpcmethod_send_to_peer_stream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::Request>* PeerComm::Stub::PrepareAsyncsend_to_peer_streamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Request>::Create(channel_.get(), cq, rpcmethod_send_to_peer_stream_, context, response, false, nullptr);
}

::grpc::Status PeerComm::Stub::prepopulate(::grpc::ClientContext* context, const ::TransactionProposal& request, ::PrepopulateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TransactionProposal, ::PrepopulateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_prepopulate_, context, request, response);
}

void PeerComm::Stub::async::prepopulate(::grpc::ClientContext* context, const ::TransactionProposal* request, ::PrepopulateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TransactionProposal, ::PrepopulateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_prepopulate_, context, request, response, std::move(f));
}

void PeerComm::Stub::async::prepopulate(::grpc::ClientContext* context, const ::TransactionProposal* request, ::PrepopulateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_prepopulate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PrepopulateResponse>* PeerComm::Stub::PrepareAsyncprepopulateRaw(::grpc::ClientContext* context, const ::TransactionProposal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PrepopulateResponse, ::TransactionProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_prepopulate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PrepopulateResponse>* PeerComm::Stub::AsyncprepopulateRaw(::grpc::ClientContext* context, const ::TransactionProposal& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprepopulateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PeerComm::Stub::start_benchmarking(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_benchmarking_, context, request, response);
}

void PeerComm::Stub::async::start_benchmarking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_benchmarking_, context, request, response, std::move(f));
}

void PeerComm::Stub::async::start_benchmarking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_benchmarking_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PeerComm::Stub::PrepareAsyncstart_benchmarkingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_benchmarking_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PeerComm::Stub::Asyncstart_benchmarkingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstart_benchmarkingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PeerComm::Stub::end_benchmarking(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_end_benchmarking_, context, request, response);
}

void PeerComm::Stub::async::end_benchmarking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_end_benchmarking_, context, request, response, std::move(f));
}

void PeerComm::Stub::async::end_benchmarking(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_end_benchmarking_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PeerComm::Stub::PrepareAsyncend_benchmarkingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_end_benchmarking_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PeerComm::Stub::Asyncend_benchmarkingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncend_benchmarkingRaw(context, request, cq);
  result->StartCall();
  return result;
}

PeerComm::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PeerComm_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PeerComm::Service, ::AppendRequest, ::AppendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PeerComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AppendRequest* req,
             ::AppendResponse* resp) {
               return service->append_entries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PeerComm_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PeerComm::Service, ::Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PeerComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Request* req,
             ::google::protobuf::Empty* resp) {
               return service->send_to_peer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PeerComm_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< PeerComm::Service, ::Request, ::google::protobuf::Empty>(
          [](PeerComm::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::Request>* reader,
             ::google::protobuf::Empty* resp) {
               return service->send_to_peer_stream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PeerComm_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PeerComm::Service, ::TransactionProposal, ::PrepopulateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PeerComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TransactionProposal* req,
             ::PrepopulateResponse* resp) {
               return service->prepopulate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PeerComm_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PeerComm::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PeerComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->start_benchmarking(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PeerComm_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PeerComm::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PeerComm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->end_benchmarking(ctx, req, resp);
             }, this)));
}

PeerComm::Service::~Service() {
}

::grpc::Status PeerComm::Service::append_entries(::grpc::ServerContext* context, const ::AppendRequest* request, ::AppendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PeerComm::Service::send_to_peer(::grpc::ServerContext* context, const ::Request* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PeerComm::Service::send_to_peer_stream(::grpc::ServerContext* context, ::grpc::ServerReader< ::Request>* reader, ::google::protobuf::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PeerComm::Service::prepopulate(::grpc::ServerContext* context, const ::TransactionProposal* request, ::PrepopulateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PeerComm::Service::start_benchmarking(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PeerComm::Service::end_benchmarking(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


